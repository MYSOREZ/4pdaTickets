package ru.fourpda.tickets

import android.content.Context
import android.content.SharedPreferences
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.SeekBar
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import ru.fourpda.tickets.databinding.ActivitySettingsBinding

class SettingsActivity : AppCompatActivity() {

    companion object {
        private const val TAG = "SettingsActivity"
        const val PREFS_NAME = "TicketMonitorSettings"
        const val KEY_REFRESH_INTERVAL = "refresh_interval"
        const val DEFAULT_REFRESH_INTERVAL = 30
        const val MIN_REFRESH_INTERVAL = 10
        const val MAX_REFRESH_INTERVAL = 300

        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        fun getRefreshInterval(context: Context): Int {
            val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
            return prefs.getInt(KEY_REFRESH_INTERVAL, DEFAULT_REFRESH_INTERVAL)
        }
    }

    private lateinit var ui: ActivitySettingsBinding
    private lateinit var prefs: SharedPreferences

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        supportActionBar?.hide()

        ui = ActivitySettingsBinding.inflate(layoutInflater)
        setContentView(ui.root)

        Log.d(TAG, "=== –û–¢–ö–†–´–¢–´ –ù–ê–°–¢–†–û–ô–ö–ò (–ú–ò–ù–ò–ú–ê–õ–ò–°–¢–ò–ß–ù–´–ô –î–ò–ó–ê–ô–ù) ===")

        prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE)
        initSettings()
        initButtons()
    }

    private fun initSettings() {
        val currentInterval = prefs.getInt(KEY_REFRESH_INTERVAL, DEFAULT_REFRESH_INTERVAL)

        Log.d(TAG, "üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫. –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: $currentInterval —Å–µ–∫")

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SeekBar
        ui.seekBarRefreshInterval.apply {
            min = MIN_REFRESH_INTERVAL
            max = MAX_REFRESH_INTERVAL
            progress = currentInterval
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        updateIntervalText(currentInterval)

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è SeekBar
        ui.seekBarRefreshInterval.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                if (fromUser) {
                    updateIntervalText(progress)
                }
            }

            override fun onStartTrackingTouch(seekBar: SeekBar?) {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                hideStatusMessage()
            }

            override fun onStopTrackingTouch(seekBar: SeekBar?) {
                val newInterval = seekBar?.progress ?: DEFAULT_REFRESH_INTERVAL
                saveRefreshInterval(newInterval)
            }
        })

        Log.d(TAG, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    }

    private fun updateIntervalText(intervalSeconds: Int) {
        ui.textCurrentInterval.text = "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: $intervalSeconds —Å–µ–∫—É–Ω–¥"

        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        val hint = when {
            intervalSeconds == DEFAULT_REFRESH_INTERVAL -> "(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ)"
            intervalSeconds < 20 -> "(–±—ã—Å—Ç—Ä–æ - –±–æ–ª—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –±–∞—Ç–∞—Ä–µ—é)"
            intervalSeconds in 31..60 -> "(—ç–∫–æ–Ω–æ–º–∏—á–Ω–æ)"
            intervalSeconds > 60 -> "(–º–µ–¥–ª–µ–Ω–Ω–æ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è)"
            else -> ""
        }
        ui.textIntervalHint.text = hint

        Log.d(TAG, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $intervalSeconds —Å–µ–∫ $hint")
    }

    private fun saveRefreshInterval(intervalSeconds: Int) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SharedPreferences
        prefs.edit().putInt(KEY_REFRESH_INTERVAL, intervalSeconds).apply()

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        showStatusMessage("‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $intervalSeconds —Å–µ–∫")

        // –ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        Toast.makeText(this, "–ò–Ω—Ç–µ—Ä–≤–∞–ª: $intervalSeconds —Å–µ–∫", Toast.LENGTH_SHORT).show()

        Log.d(TAG, "üíæ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $intervalSeconds —Å–µ–∫—É–Ω–¥")
    }

    private fun initButtons() = with(ui) {

        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        btnBackToMain.setOnClickListener {
            Log.d(TAG, "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            finish()
        }

        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        btnResetToDefault.setOnClickListener {
            Log.d(TAG, "üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            resetToDefaults()
        }
    }

    private fun resetToDefaults() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ui.seekBarRefreshInterval.progress = DEFAULT_REFRESH_INTERVAL
        updateIntervalText(DEFAULT_REFRESH_INTERVAL)
        saveRefreshInterval(DEFAULT_REFRESH_INTERVAL)

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        showStatusMessage("‚úÖ –°–±—Ä–æ—à–µ–Ω–æ –¥–æ $DEFAULT_REFRESH_INTERVAL —Å–µ–∫—É–Ω–¥")

        Toast.makeText(this,
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ $DEFAULT_REFRESH_INTERVAL —Å–µ–∫—É–Ω–¥",
            Toast.LENGTH_SHORT).show()

        Log.d(TAG, "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã")
    }

    private fun showStatusMessage(message: String) {
        ui.textSaveStatus.apply {
            text = message
            visibility = View.VISIBLE
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        ui.textSaveStatus.postDelayed({
            hideStatusMessage()
        }, 3000)
    }

    private fun hideStatusMessage() {
        ui.textSaveStatus.visibility = View.GONE
    }

    override fun onResume() {
        super.onResume()
        Log.d(TAG, "üì± SettingsActivity –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
        val currentInterval = prefs.getInt(KEY_REFRESH_INTERVAL, DEFAULT_REFRESH_INTERVAL)
        ui.seekBarRefreshInterval.progress = currentInterval
        updateIntervalText(currentInterval)
    }

    override fun onPause() {
        super.onPause()
        Log.d(TAG, "üì± SettingsActivity –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        hideStatusMessage()
    }

    override fun onBackPressed() {
        Log.d(TAG, "üîô –ù–∞–∂–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'")
        super.onBackPressed()
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "üíÄ SettingsActivity —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞")
    }
}
