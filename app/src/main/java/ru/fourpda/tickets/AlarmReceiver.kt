package ru.fourpda.tickets

import android.app.AlarmManager
import android.app.PendingIntent
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.PowerManager
import android.util.Log
import java.util.Calendar

/**
 * BroadcastReceiver –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ AlarmManager
 * –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –±–æ—Ä—å–±—ã —Å —É—Å—ã–ø–ª–µ–Ω–∏–µ–º –Ω–∞ MIUI
 */
class AlarmReceiver : BroadcastReceiver() {

    companion object {
        private const val TAG = "AlarmReceiver"
        private const val ALARM_INTERVAL_MINUTES = 10 // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞)
        const val ACTION_CHECK_SERVICE = "ru.fourpda.tickets.CHECK_SERVICE"

        fun scheduleAlarm(context: Context) {
            val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
            val intent = Intent(context, AlarmReceiver::class.java).apply {
                action = ACTION_CHECK_SERVICE
            }

            val pendingIntent = PendingIntent.getBroadcast(
                context,
                0,
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT or
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    PendingIntent.FLAG_IMMUTABLE
                } else {
                    0
                }
            )

            // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–ª–∞—Ä–º—ã
            alarmManager.cancel(pendingIntent)

            val calendar = Calendar.getInstance().apply {
                timeInMillis = System.currentTimeMillis()
                add(Calendar.MINUTE, ALARM_INTERVAL_MINUTES)
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π –∞–ª–ª–∞—Ä–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            when {
                Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
                    // Android 12+ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∞–ª–ª–∞—Ä–º–æ–≤
                    if (alarmManager.canScheduleExactAlarms()) {
                        alarmManager.setExactAndAllowWhileIdle(
                            AlarmManager.RTC_WAKEUP,
                            calendar.timeInMillis,
                            pendingIntent
                        )
                        Log.d(TAG, "‚úÖ –¢–æ—á–Ω—ã–π –∞–ª–ª–∞—Ä–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Android 12+)")
                    } else {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Ç–æ—á–Ω—ã–π –∞–ª–ª–∞—Ä–º –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                        alarmManager.setAndAllowWhileIdle(
                            AlarmManager.RTC_WAKEUP,
                            calendar.timeInMillis,
                            pendingIntent
                        )
                        Log.d(TAG, "‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ—Ç–æ—á–Ω—ã–π –∞–ª–ª–∞—Ä–º (–Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–Ω—ã–µ)")
                    }
                }
                Build.VERSION.SDK_INT >= Build.VERSION_CODES.M -> {
                    alarmManager.setExactAndAllowWhileIdle(
                        AlarmManager.RTC_WAKEUP,
                        calendar.timeInMillis,
                        pendingIntent
                    )
                    Log.d(TAG, "‚úÖ –¢–æ—á–Ω—ã–π –∞–ª–ª–∞—Ä–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                }
                else -> {
                    alarmManager.setExact(
                        AlarmManager.RTC_WAKEUP,
                        calendar.timeInMillis,
                        pendingIntent
                    )
                    Log.d(TAG, "‚úÖ –ê–ª–ª–∞—Ä–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                }
            }

            Log.d(TAG, "‚è∞ –°–ª–µ–¥—É—é—â–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ $ALARM_INTERVAL_MINUTES –º–∏–Ω—É—Ç")
        }

        fun cancelAlarm(context: Context) {
            val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
            val intent = Intent(context, AlarmReceiver::class.java)
            val pendingIntent = PendingIntent.getBroadcast(
                context,
                0,
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT or
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    PendingIntent.FLAG_IMMUTABLE
                } else {
                    0
                }
            )
            alarmManager.cancel(pendingIntent)
            Log.d(TAG, "üõë –ê–ª–ª–∞—Ä–º –æ—Ç–º–µ–Ω–µ–Ω")
        }
    }

    override fun onReceive(context: Context, intent: Intent) {
        Log.d(TAG, "‚è∞ AlarmReceiver —Å—Ä–∞–±–æ—Ç–∞–ª: ${intent.action}")

        // –ü–æ–ª—É—á–∞–µ–º WakeLock –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        val powerManager = context.getSystemService(Context.POWER_SERVICE) as PowerManager
        val wakeLock = powerManager.newWakeLock(
            PowerManager.PARTIAL_WAKE_LOCK,
            "4pdaTickets:AlarmWakeLock"
        )

        try {
            // –î–µ—Ä–∂–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–Ω—ã–º –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            wakeLock.acquire(10_000L) // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º

            when (intent.action) {
                ACTION_CHECK_SERVICE -> {
                    checkAndRestartService(context)
                    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞–ª–ª–∞—Ä–º
                    scheduleAlarm(context)
                }
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤ AlarmReceiver: ${e.message}")
        } finally {
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º WakeLock
            if (wakeLock.isHeld) {
                wakeLock.release()
            }
        }
    }

    private fun checkAndRestartService(context: Context) {
        Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ AlarmReceiver")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        val prefs = context.getSharedPreferences("service_state", Context.MODE_PRIVATE)
        if (prefs.getBoolean("explicitly_stopped", false)) {
            Log.d(TAG, "‚úÖ –°–µ—Ä–≤–∏—Å –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, AlarmReceiver –æ—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É.")
            // –í–∞–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—É–¥—É—â–∏–µ –∞–ª–∞—Ä–º—ã, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            cancelAlarm(context)
            return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (!isUserAuthenticated(context)) {
            Log.d(TAG, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        if (!isServiceRunning(context)) {
            Log.d(TAG, "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º!")
            startMonitoringService(context)
        } else {
            Log.d(TAG, "‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å–µ—Ä–≤–∏—Å—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            sendKeepAliveSignal(context)
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        saveLastAlarmTime(context)
    }

    private fun isUserAuthenticated(context: Context): Boolean {
        return try {
            val cookieManager = android.webkit.CookieManager.getInstance()
            val cookies = cookieManager.getCookie("https://4pda.to") ?: ""
            
            cookies.contains("member_id=") && 
            cookies.contains("pass_hash=") && 
            !cookies.contains("member_id=0")
        } catch (e: Exception) {
            false
        }
    }

    private fun isServiceRunning(context: Context): Boolean {
        return try {
            val manager = context.getSystemService(Context.ACTIVITY_SERVICE) as android.app.ActivityManager
            val runningServices = manager.getRunningServices(100)
            
            runningServices.any { 
                ForegroundMonitorService::class.java.name == it.service.className 
            }
        } catch (e: Exception) {
            false
        }
    }

    private fun startMonitoringService(context: Context) {
        try {
            // –£–°–¢–ê–†–ï–õ–û: –ë–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º ForegroundService
            // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ ExactAlarmScheduler
            Log.d(TAG, "‚ÑπÔ∏è startMonitoringService() —É—Å—Ç–∞—Ä–µ–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º ExactAlarmScheduler")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            val intervalSeconds = SettingsActivity.getRefreshInterval(context)
            if (ExactAlarmScheduler.canScheduleExactAlarms(context)) {
                ExactAlarmScheduler.scheduleNextAlarmSeconds(context, intervalSeconds)
                Log.d(TAG, "‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ç–æ—á–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ $intervalSeconds —Å–µ–∫—É–Ω–¥")
            } else {
                Log.w(TAG, "‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏")
            }

            Log.d(TAG, "‚úÖ –¢–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —á–µ—Ä–µ–∑ AlarmReceiver")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤: ${e.message}")
        }
    }

    private fun sendKeepAliveSignal(context: Context) {
        val intent = Intent(context, ForegroundMonitorService::class.java).apply {
            action = "ru.fourpda.tickets.action.KEEP_ALIVE"
        }
        context.startService(intent)
    }

    private fun saveLastAlarmTime(context: Context) {
        val prefs = context.getSharedPreferences("alarm_prefs", Context.MODE_PRIVATE)
        prefs.edit().putLong("last_alarm_time", System.currentTimeMillis()).apply()
    }
}
