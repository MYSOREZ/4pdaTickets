package ru.fourpda.tickets

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import android.webkit.CookieManager
import android.webkit.WebSettings

class BootReceiver : BroadcastReceiver() {

    companion object {
        private const val TAG = "BootReceiver"
    }

    override fun onReceive(context: Context, intent: Intent) {
        val action = intent.action
        Log.d(TAG, "=== –ü–û–õ–£–ß–ï–ù BROADCAST: $action ===")

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logSystemInfo(context)

        when (action) {
            Intent.ACTION_BOOT_COMPLETED -> {
                Log.d(TAG, "üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (BOOT_COMPLETED)")
                handleDeviceBoot(context, "–û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
            }

            "android.intent.action.QUICKBOOT_POWERON" -> {
                Log.d(TAG, "‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Android (QUICKBOOT_POWERON)")
                handleDeviceBoot(context, "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Android")
            }

            "com.htc.intent.action.QUICKBOOT_POWERON" -> {
                Log.d(TAG, "‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ HTC (HTC QUICKBOOT)")
                handleDeviceBoot(context, "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ HTC")
            }

            Intent.ACTION_MY_PACKAGE_REPLACED -> {
                Log.d(TAG, "üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (MY_PACKAGE_REPLACED)")
                handleAppUpdate(context)
            }

            Intent.ACTION_PACKAGE_REPLACED -> {
                val packageName = intent.dataString
                if (packageName?.contains(context.packageName) == true) {
                    Log.d(TAG, "üîÑ –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (PACKAGE_REPLACED)")
                    handleAppUpdate(context)
                }
            }

            else -> {
                Log.d(TAG, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π action: $action")
            }
        }
    }

    private fun handleDeviceBoot(context: Context, bootType: String) {
        Log.d(TAG, "üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: $bootType")

        try {
            // –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ –≤—Ä–µ–º—è —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                checkAuthenticationAndStartService(context, "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: $bootType")
            }, 5000) // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}")
        }
    }

    private fun handleAppUpdate(context: Context) {
        Log.d(TAG, "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        try {
            // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±–æ–ª—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                checkAuthenticationAndStartService(context, "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            }, 3000) // 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${e.message}")
        }
    }

    private fun checkAuthenticationAndStartService(context: Context, reason: String) {
        Log.d(TAG, "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

        if (isUserAuthenticated(context)) {
            Log.d(TAG, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–∏—Å
            if (!isMonitoringServiceRunning(context)) {
                startMonitoringService(context, reason)
            } else {
                Log.d(TAG, "‚ÑπÔ∏è –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            }
        } else {
            Log.d(TAG, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
            Log.d(TAG, "üí° –î–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        }
    }

    private fun isUserAuthenticated(context: Context): Boolean {
        return try {
            Log.d(TAG, "üç™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CookieManager...")

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CookieManager
            val cookieManager = CookieManager.getInstance()

            // –í–∫–ª—é—á–∞–µ–º –ø—Ä–∏–µ–º cookies
            cookieManager.setAcceptCookie(true)

            // –î–ª—è Android 5.0+ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è cookies –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                cookieManager.flush()

                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSettings –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã cookies
                try {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                        WebSettings.getDefaultUserAgent(context)
                    }
                } catch (e: Exception) {
                    Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebSettings: ${e.message}")
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º cookies –¥–ª—è 4PDA
            val cookies = cookieManager.getCookie("https://4pda.to") ?: ""
            Log.d(TAG, "üç™ –ù–∞–π–¥–µ–Ω–æ cookies: ${cookies.length} —Å–∏–º–≤–æ–ª–æ–≤")

            if (cookies.isNotEmpty()) {
                Log.d(TAG, "üç™ Cookies preview: ${cookies.take(200)}...")
            } else {
                Log.d(TAG, "üç™ Cookies –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            val hasValidCookies = cookies.contains("member_id=") &&
                    cookies.contains("pass_hash=") &&
                    !cookies.contains("member_id=0") &&
                    cookies.isNotEmpty()

            if (hasValidCookies) {
                Log.d(TAG, "‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ cookies –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏–∑–≤–ª–µ–∫–∞–µ–º member_id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                val memberIdRegex = "member_id=([^;]+)".toRegex()
                val memberIdMatch = memberIdRegex.find(cookies)
                val memberId = memberIdMatch?.groupValues?.get(1) ?: "unknown"

                Log.d(TAG, "üë§ Member ID: $memberId")

                if (memberId != "0" && memberId != "unknown" && memberId.isNotEmpty()) {
                    Log.d(TAG, "‚úÖ Cookies –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $memberId –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    return true
                } else {
                    Log.d(TAG, "‚ùå Member ID –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: $memberId")
                    return false
                }
            } else {
                Log.d(TAG, "‚ùå –í–∞–ª–∏–¥–Ω—ã–µ cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                Log.d(TAG, "üîç –ü—Ä–∏—á–∏–Ω—ã: member_id=${cookies.contains("member_id=")}, " +
                        "pass_hash=${cookies.contains("pass_hash=")}, " +
                        "not_zero=${!cookies.contains("member_id=0")}, " +
                        "not_empty=${cookies.isNotEmpty()}")
                return false
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}")
            e.printStackTrace()
            return false
        }
    }

    private fun startMonitoringService(context: Context, reason: String) {
        try {
            Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ ForegroundMonitorService")
            Log.d(TAG, "üìã –ü—Ä–∏—á–∏–Ω–∞: $reason")

            val serviceIntent = Intent(context, ForegroundMonitorService::class.java).apply {
                action = ForegroundMonitorService.ACTION_START_MONITORING
                putExtra("auto_start_reason", reason)
                putExtra("started_by", "BootReceiver")
                putExtra("start_timestamp", System.currentTimeMillis())
            }

            // –£–°–¢–ê–†–ï–õ–û: –ë–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º ForegroundService
            // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ ExactAlarmScheduler
            Log.d(TAG, "‚ÑπÔ∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ ForegroundService –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º ExactAlarmScheduler")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            val intervalSeconds = SettingsActivity.getRefreshInterval(context)
            if (ExactAlarmScheduler.canScheduleExactAlarms(context)) {
                ExactAlarmScheduler.scheduleNextAlarmSeconds(context, intervalSeconds)
                Log.d(TAG, "‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ç–æ—á–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ $intervalSeconds —Å–µ–∫—É–Ω–¥")
            } else {
                Log.w(TAG, "‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏")
            }

            Log.d(TAG, "‚úÖ –¢–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

            // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç —É—Å—ã–ø–ª–µ–Ω–∏—è
            KeepAliveWorker.scheduleWork(context)
            AlarmReceiver.scheduleAlarm(context)
            
            // –ù–û–í–û–ï: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && ExactAlarmScheduler.canScheduleExactAlarms(context)) {
                ExactAlarmScheduler.scheduleNextAlarm(context, 5)
                Log.d(TAG, "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
            } else {
                Log.d(TAG, "‚ö†Ô∏è –¢–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã")
            }
            
            Log.d(TAG, "‚úÖ –ó–∞–ø—É—â–µ–Ω—ã –≤—Å–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç —É—Å—ã–ø–ª–µ–Ω–∏—è –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–µ")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ForegroundMonitorService: ${e.message}")
            e.printStackTrace()

            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
            android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                try {
                    Log.d(TAG, "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—á–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤...")
                    
                    val intervalSeconds = SettingsActivity.getRefreshInterval(context)
                    if (ExactAlarmScheduler.canScheduleExactAlarms(context)) {
                        ExactAlarmScheduler.scheduleNextAlarmSeconds(context, intervalSeconds)
                        Log.d(TAG, "‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                    } else {
                        Log.w(TAG, "‚ö†Ô∏è –í—Å–µ –µ—â–µ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏")
                    }

                    Log.d(TAG, "‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

                } catch (retryException: Exception) {
                    Log.e(TAG, "‚ùå –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–∞–∫–∂–µ –Ω–µ—É–¥–∞—á–µ–Ω: ${retryException.message}")
                }
            }, 10000) // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        }
    }

    private fun isMonitoringServiceRunning(context: Context): Boolean {
        return try {
            val manager = context.getSystemService(Context.ACTIVITY_SERVICE) as android.app.ActivityManager
            val runningServices = manager.getRunningServices(100)

            for (service in runningServices) {
                if (ForegroundMonitorService::class.java.name == service.service.className) {
                    Log.d(TAG, "üîç ForegroundMonitorService —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: ${service.pid})")
                    return true
                }
            }

            Log.d(TAG, "üîç ForegroundMonitorService –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö")
            return false

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: ${e.message}")
            return false
        }
    }

    private fun logSystemInfo(context: Context) {
        try {
            Log.d(TAG, "üìä === –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===")
            Log.d(TAG, "üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${Build.MANUFACTURER} ${Build.MODEL}")
            Log.d(TAG, "ü§ñ Android: ${Build.VERSION.RELEASE} (API ${Build.VERSION.SDK_INT})")
            Log.d(TAG, "üì¶ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${context.packageName}")
            Log.d(TAG, "‚è∞ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: ${System.currentTimeMillis()}")
            Log.d(TAG, "üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: ${android.os.SystemClock.elapsedRealtime()}ms")

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            val refreshInterval = SettingsActivity.getRefreshInterval(context)
            Log.d(TAG, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: $refreshInterval —Å–µ–∫—É–Ω–¥")

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            try {
                val batteryManager = context.getSystemService(Context.BATTERY_SERVICE) as? android.os.BatteryManager
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && batteryManager != null) {
                    val batteryLevel = batteryManager.getIntProperty(android.os.BatteryManager.BATTERY_PROPERTY_CAPACITY)
                    Log.d(TAG, "üîã –£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏: $batteryLevel%")
                }
            } catch (e: Exception) {
                Log.d(TAG, "üîã –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ")
            }

            Log.d(TAG, "üìä === –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ===")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${e.message}")
        }
    }
}
