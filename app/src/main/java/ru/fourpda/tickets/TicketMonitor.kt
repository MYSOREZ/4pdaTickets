package ru.fourpda.tickets

import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.webkit.JavascriptInterface
import android.webkit.WebView
import androidx.core.app.NotificationCompat
import androidx.core.app.Person
import java.util.ArrayDeque
import java.util.Deque

class TicketMonitor(
    private val context: Context,
    private val webView: WebView,
    private val onStatusUpdate: (String) -> Unit
) {
    companion object {
        private const val TAG = "TicketMonitor"
    }

    private val handler = Handler(Looper.getMainLooper())
    private val queue: Deque<Ticket> = ArrayDeque()
    private var queueBusy = false
    private var isMonitoringActive = false

    data class Ticket(
        val id: String,
        val title: String,
        val section: String,
        val date: String,
        val topic: String,
        val description: String
    )

    init {
        webView.addJavascriptInterface(JsBridge(), "TicketJS")
        Log.d(TAG, "üì± TicketMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å JavaScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º")

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É JavaScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        Handler(Looper.getMainLooper()).postDelayed({
            webView.evaluateJavascript("typeof TicketJS") { result ->
                Log.d(TAG, "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ TicketJS: $result")
            }
        }, 1000)
    }

    fun startMonitoring() {
        Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–∏–∫–µ—Ç–æ–≤")
        isMonitoringActive = true
    }

    fun stopMonitoring() {
        Log.d(TAG, "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        isMonitoringActive = false
    }

    fun searchNow() {
        Log.d(TAG, "üîç –ü–æ–∏—Å–∫ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
        if (isMonitoringActive) {
            executeJavaScript()
        }
    }

    fun clearHistory() {
        Log.d(TAG, "üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        queue.clear()
        queueBusy = false
        // –û—á–∏—â–∞–µ–º —Ç–∞–∫–∂–µ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        TicketNotifyDeduper.clear(context)
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ QuickCheckWorker –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    fun handleTickets(jsonStr: String) {
        val jsBridge = JsBridge()
        jsBridge.onTickets(jsonStr)
    }

    fun handleNoTickets() {
        val jsBridge = JsBridge()
        jsBridge.onNoTickets()
    }

    fun handleFullStats(total: Int, processed: Int, unprocessed: Int, inProgress: Int) {
        val jsBridge = JsBridge()
        jsBridge.onFullStats(total, processed, unprocessed, inProgress)
    }

    fun handleLogDebug(msg: String) {
        val jsBridge = JsBridge()
        jsBridge.logDebug(msg)
    }

    fun handleError(msg: String) {
        val jsBridge = JsBridge()
        jsBridge.err(msg)
    }

    private fun sendTicketStats(totalCount: Int, processedCount: Int, unprocessedCount: Int, inProgressCount: Int) {
        val intent = Intent("ru.fourpda.tickets.TICKET_STATS").apply {
            putExtra("total", totalCount)
            putExtra("processed", processedCount)
            putExtra("unprocessed", unprocessedCount)
            putExtra("in_progress", inProgressCount)
            setPackage(context.packageName)
        }
        context.sendBroadcast(intent)
        Log.d(TAG, "üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ=$totalCount, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=$processedCount, –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=$unprocessedCount, –≤ —Ä–∞–±–æ—Ç–µ=$inProgressCount")
    }

    private fun executeJavaScript() {
        Log.d(TAG, "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤")

        // –í–ù–ò–ú–ê–ù–ò–ï: —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ RegExp –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å SyntaxError
        val js = """
            (function () {
              try {
                const tickets = [];
                let processedCount = 0;
                let unprocessedCount = 0;
                let inProgressCount = 0;
                let totalCount = 0;
                let debugInfo = 'DEBUG [' + new Date().toLocaleTimeString() + ']: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∏–∫–µ—Ç–æ–≤ 4PDA: ';
                
                const allRows = document.querySelectorAll('div.t-row[id^="t-row-"]');
                totalCount = allRows.length;
                debugInfo += '–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤: ' + totalCount + '. ';
                
                // –°–Ω–∞—á–∞–ª–∞ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –≤—Å–µ —Ç–∏–∫–µ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0, —á—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∏—Ö
                const status0Rows = [];
                allRows.forEach(function(row) {
                  const rowClasses = row.className;
                  const rowStatusMatch = rowClasses.match(/row-status-(\d+)/);
                  const rowStatus = rowStatusMatch ? rowStatusMatch[1] : 'unknown';
                  
                  const statusCell = row.querySelector('.t-status');
                  const cellClasses = statusCell ? statusCell.className : '';
                  const cellStatusMatch = cellClasses.match(/status-(\d+)/);
                  const cellStatus = cellStatusMatch ? cellStatusMatch[1] : 'unknown';
                  
                  const isStatus0 = (rowStatus === '0' || cellStatus === '0' || 
                                    row.classList.contains('row-status-0') || 
                                    (statusCell && statusCell.classList.contains('status-0')));
                  
                  if (isStatus0) {
                    status0Rows.push(row);
                    // –ö–ª–∏–∫–∞–µ–º –Ω–∞ —Ç–∏–∫–µ—Ç, —á—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ
                    const titleEl = row.querySelector('.t-title');
                    if (titleEl) {
                      titleEl.click();
                      debugInfo += '–ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç–∏–∫–µ—Ç –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è. ';
                    }
                  }
                });
                
                // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
                setTimeout(function() {
                  allRows.forEach(function(row, index) {
                    const rowClasses = row.className;
                    const rowStatusMatch = rowClasses.match(/row-status-(\d+)/);
                    const rowStatus = rowStatusMatch ? rowStatusMatch[1] : 'unknown';
                    
                    const statusCell = row.querySelector('.t-status');
                    const cellClasses = statusCell ? statusCell.className : '';
                    const cellStatusMatch = cellClasses.match(/status-(\d+)/);
                    const cellStatus = cellStatusMatch ? cellStatusMatch[1] : 'unknown';
                    
                    debugInfo += '–¢–∏–∫–µ—Ç ' + index + ': row-status-' + rowStatus + ', cell-status-' + cellStatus + '; ';
                    
                    const isStatus0 = (rowStatus === '0' || cellStatus === '0' || 
                                      row.classList.contains('row-status-0') || 
                                      (statusCell && statusCell.classList.contains('status-0')));
                    
                    const isStatus1 = (rowStatus === '1' || cellStatus === '1' || 
                                      row.classList.contains('row-status-1') || 
                                      (statusCell && statusCell.classList.contains('status-1')));

                    const isStatus2 = (rowStatus === '2' || cellStatus === '2' || 
                                      row.classList.contains('row-status-2') || 
                                      (statusCell && statusCell.classList.contains('status-2')));
                    
                    if (isStatus0) {
                      unprocessedCount++;
                      debugInfo += 'üî• –ù–ê–ô–î–ï–ù –°–¢–ê–¢–£–°-0! ';
                      
                      const id = row.getAttribute('t_id') || row.id.replace('t-row-', '');
                      const titleEl = row.querySelector('.t-title a');
                      const title = titleEl ? titleEl.textContent.trim() : '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                      const sectionEl = row.querySelector('.t-description a');
                      const section = sectionEl ? sectionEl.textContent.trim() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª';
                      const dateEl = row.querySelector('.t-date a');
                      const date = dateEl ? dateEl.textContent.trim() : '';
                      
                      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É (topic) –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                      let topic = '';
                      let description = '';
                      
                      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                      let contentEl = document.querySelector('#t-row-content-' + id);
                      if (!contentEl) {
                        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
                        const nextRow = row.nextElementSibling;
                        if (nextRow && nextRow.classList.contains('t-row-content')) {
                          contentEl = nextRow;
                        }
                      }
                      
                      if (contentEl) {
                        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—ç—à–µ–π –≤ RegExp
                        const topicMatch = contentEl.innerHTML.match(/–¢–µ–º–∞:<\/?strong>\s*<a[^>]+>([^<]+)<\/a>/);
                        if (topicMatch) {
                          topic = topicMatch[1].trim();
                        } else {
                          const topicLink = contentEl.querySelector('a[href*="findpost"]');
                          if (topicLink) {
                            topic = topicLink.textContent.trim();
                          }
                        }
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ td-message
                        const tdMessageElements = contentEl.querySelectorAll('.td-message');
                        if (tdMessageElements.length > 0) {
                          const lastTdMessage = tdMessageElements[tdMessageElements.length - 1];
                          
                          // --- –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ v3 ---
                          let messageHTML = lastTdMessage.innerHTML;

                          // –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —É–¥–∞–ª—è–µ–º –±–ª–æ–∫ —Å IP –∏ QMS, –≥–¥–µ –±—ã –æ–Ω –Ω–∏ –±—ã–ª
                          messageHTML = messageHTML.replace(/IP:[\s\S]*?QMS/g, '');

                          // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π HTML
                          messageHTML = messageHTML.replace(/<br\s*\/?>(?=\s*\n?)/gi, '\n');
                          messageHTML = messageHTML.replace(/<\/(p|div)>/gi, '\n');
                          let descText = messageHTML.replace(/<[^>]+>/g, '').trim();

                          // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤
                          descText = descText.replace(/(\s*\n\s*)+/g, '\n').trim();
                          // --- –ö–æ–Ω–µ—Ü —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ ---

                          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
                          if (descText.length > 100) {
                            description = descText.substring(0, 100) + '...';
                          } else {
                            description = descText;
                          }
                        }
                      }
                      
                      // –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–∫–µ—Ç–∞ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
                      if (!topic) {
                        topic = '–¢–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞';
                      }
                      
                      tickets.push({id: id, title: title, section: section, date: date, topic: topic, description: description});
                      debugInfo += '–î–æ–±–∞–≤–ª–µ–Ω: ' + title + ' (–¢–µ–º–∞: ' + topic + '); ';
                    } else if (isStatus1) {
                      inProgressCount++;
                      debugInfo += '‚ö†Ô∏è –ù–ê–ô–î–ï–ù –°–¢–ê–¢–£–°-1! ';
                    } else if (isStatus2) {
                      processedCount++;
                      debugInfo += '‚úÖ –ù–ê–ô–î–ï–ù –°–¢–ê–¢–£–°-2! ';
                    }
                  });
                  
                  debugInfo += '–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–û–í: –≤—Å–µ–≥–æ=' + totalCount + ', –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=' + processedCount + ', –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=' + unprocessedCount + ', –≤ —Ä–∞–±–æ—Ç–µ=' + inProgressCount + '. ';
                  
                  console.log(debugInfo);
                  TicketJS.logDebug(debugInfo);
                  
                  TicketJS.onFullStats(totalCount, processedCount, unprocessedCount, inProgressCount);
                  
                  if (tickets.length) {
                    TicketJS.onTickets(JSON.stringify(tickets));
                  } else {
                    TicketJS.onNoTickets();
                  }
                  
                }, 1000); // –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∫–ª–∏–∫–æ–≤
                
              } catch (e) {
                TicketJS.err('–û—à–∏–±–∫–∞ –≤ JavaScript: ' + e.message);
              }
            })();
        """.trimIndent()

        webView.evaluateJavascript(js, null)
    }

    inner class JsBridge {
        @JavascriptInterface
        fun onTickets(j: String) {
            Log.d(TAG, "üéØ JavaScript –Ω–∞—à–µ–ª —Ç–∏–∫–µ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0: $j")
            FileLogger.d(TAG, "üéØ JavaScript –Ω–∞—à–µ–ª —Ç–∏–∫–µ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0: $j")
            val arr = org.json.JSONArray(j)
            val totalTicketsFound = arr.length()

            // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö TicketInfo
            val allTickets = mutableListOf<Ticket>()
            val allTicketInfos = mutableListOf<TicketInfo>()

            repeat(arr.length()) { i ->
                val obj = arr.getJSONObject(i)
                val ticket = Ticket(
                    obj.getString("id"),
                    obj.getString("title"),
                    obj.getString("section"),
                    obj.getString("date"),
                    obj.getString("topic"),
                    obj.getString("description")
                )
                allTickets.add(ticket)
                
                // –°–æ–∑–¥–∞–µ–º TicketInfo –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                allTicketInfos.add(
                    TicketInfo(
                        id = ticket.id,
                        title = ticket.title,
                        url = "https://4pda.to/forum/index.php?act=ticket&s=thread&t_id=${ticket.id}",
                        status = "${ticket.topic}|${ticket.description}", // –ò—Å–ø–æ–ª—å–∑—É–µ–º topic+description –∫–∞–∫ —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        lastUpdate = ticket.date
                    )
                )
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ (–µ—â–µ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ) —Ç–∏–∫–µ—Ç—ã
            val newTicketInfos = TicketNotifyDeduper.filterNew(context, allTicketInfos)
            
            if (newTicketInfos.isEmpty()) {
                Log.d(TAG, "‚ö†Ô∏è –í—Å–µ —Ç–∏–∫–µ—Ç—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏: $totalTicketsFound")
                onStatusUpdate("–ê–∫—Ç–∏–≤–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤: $totalTicketsFound (–¥—É–±–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã)")
                return
            }

            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
            val newTicketIds = newTicketInfos.map { it.id }.toSet()
            val ticketsToShow = allTickets.filter { it.id in newTicketIds }

            Log.d(TAG, "‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞: ${ticketsToShow.size} –∏–∑ $totalTicketsFound")

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–∫–∞–∑–∞
            queue.addAll(ticketsToShow)
            if (!queueBusy && queue.isNotEmpty()) {
                processQueue()
            }

            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
            TicketNotifyDeduper.markShown(context, newTicketInfos)

            onStatusUpdate("–ê–∫—Ç–∏–≤–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤: $totalTicketsFound (–Ω–æ–≤—ã—Ö: ${ticketsToShow.size})")
        }

        @JavascriptInterface
        fun onNoTickets() {
            Log.d(TAG, "JavaScript: –¢–∏–∫–µ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0 –ø–æ–∫–∞ –Ω–µ—Ç")
            FileLogger.d(TAG, "JavaScript: –¢–∏–∫–µ—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0 –ø–æ–∫–∞ –Ω–µ—Ç")
            onStatusUpdate("–ê–∫—Ç–∏–≤–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤: 0")
        }

        @JavascriptInterface
        fun onFullStats(totalCount: Int, processedCount: Int, unprocessedCount: Int, inProgressCount: Int) {
            Log.d(TAG, "üìä –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ=$totalCount, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=$processedCount, –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=$unprocessedCount, –≤ —Ä–∞–±–æ—Ç–µ=$inProgressCount")
            sendTicketStats(totalCount, processedCount, unprocessedCount, inProgressCount)

            // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è QuickCheckWorker
            val statusMessage = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –≤—Å–µ–≥–æ=$totalCount, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=$processedCount, –Ω–æ–≤—ã–µ=$unprocessedCount, –≤ —Ä–∞–±–æ—Ç–µ=$inProgressCount"
            onStatusUpdate(statusMessage)
        }

        @JavascriptInterface
        fun logDebug(debugInfo: String) {
            Log.d(TAG, debugInfo)
        }

        @JavascriptInterface
        fun err(m: String) = Log.e(TAG, "JS-error: $m")
    }

    private fun processQueue() {
        if (queue.isEmpty()) {
            queueBusy = false
            return
        }
        queueBusy = true
        showNotification(queue.removeFirst())
        handler.postDelayed({ processQueue() }, 1500)
    }

    private fun createTicketIntent(ticketUrl: String): Intent {
        Log.d(TAG, "üîó –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–µ: $ticketUrl")
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–±–∞—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HyperOS/MIUI
        return IntentDebugger.createRobustFourpdaIntent(context, ticketUrl)
    }

    private fun showNotification(ticket: Ticket) {
        Log.d(TAG, "üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ '–±–∏–ª–µ—Ç –≤ –∫—Ä—É–∂–∫–µ':")
        Log.d(TAG, "  - ID: ${ticket.id}, Section: ${ticket.section}, Topic: ${ticket.topic}")

        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤ (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –Ω–∞ Android 13 –ø–æ—Å–ª–µ —á–∏—Å—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
        NotificationChannels.ensure(context)

        val nm = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

        val ticketUrl = "https://4pda.to/forum/index.php?act=ticket&s=thread&t_id=${ticket.id}"
        val intent = createTicketIntent(ticketUrl)

        // –°–æ–∑–¥–∞–µ–º TicketInfo –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        val ticketInfo = TicketInfo(
            id = ticket.id,
            title = ticket.title,
            url = ticketUrl,
            status = "${ticket.topic}|${ticket.description}", // –ò—Å–ø–æ–ª—å–∑—É–µ–º topic+description –∫–∞–∫ —Å—Ç–∞—Ç—É—Å
            lastUpdate = ticket.date
        )
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        val notificationId = TicketNotifyDeduper.key(ticketInfo).hashCode()

        val pendingIntent = PendingIntent.getActivity(
            context,
            notificationId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID –¥–ª—è PendingIntent
            intent,
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            } else {
                PendingIntent.FLAG_UPDATE_CURRENT
            }
        )

        // 1. –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–∞
        val user = Person.Builder()
            .setName("–í—ã")
            .setKey("user")
            .build()

        // "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫" - —Ä–∞–∑–¥–µ–ª —Ñ–æ—Ä—É–º–∞. –ò–º—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ø–∞–ª –≤ –∞–≤–∞—Ç–∞—Ä.
        val chatPartner = Person.Builder()
            .setName("üé´ ${ticket.section}")
            .setKey(ticket.section)
            .build()

        // 2. –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        val ticketTimestamp = DateUtils.parseTicketDateToTimestamp(ticket.date)
        val formattedDate = DateUtils.formatTicketDate(ticket.date)
        val messageText = "–¢–µ–º–∞: ${ticket.topic}\n–¢–∏–∫–µ—Ç:\n${ticket.description}\n\n$formattedDate"

        // 3. –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç "—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
        val message = NotificationCompat.MessagingStyle.Message(
            messageText,
            ticketTimestamp,
            chatPartner
        )

        // 4. –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å 1-–Ω–∞-1 –¥–∏–∞–ª–æ–≥–∞
        val messagingStyle = NotificationCompat.MessagingStyle(user).addMessage(message)

        // 5. –°–æ–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        val notification = NotificationCompat.Builder(context, NotificationChannels.TICKETS_CHANNEL_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_email)
            .setStyle(messagingStyle)
            .setCategory(NotificationCompat.CATEGORY_MESSAGE)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .build()

        nm.notify(notificationId, notification)
        Log.d(TAG, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ '–±–∏–ª–µ—Ç –≤ –∫—Ä—É–∂–∫–µ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å ID: $notificationId")
    }
}