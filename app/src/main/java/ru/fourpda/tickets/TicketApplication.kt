package ru.fourpda.tickets

import android.app.Application
import android.content.Context
import android.util.Log

class TicketApplication : Application() {

    companion object {
        private const val TAG = "TicketApp"
        lateinit var instance: TicketApplication
            private set
    }

    override fun onCreate() {
        super.onCreate()
        instance = this

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        FileLogger.init(this)

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        setupGlobalExceptionHandler()

        // –í–ê–ñ–ù–û: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        // (–Ω—É–∂–Ω–æ –¥–æ –ª—é–±–æ–≥–æ notify(), —á—Ç–æ–±—ã –Ω–∞ Android 13 –Ω–µ –±—ã–ª–æ ¬´–Ω–µ–º—ã—Ö¬ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
        NotificationChannels.ensure(this)

        FileLogger.i(TAG, "üöÄ TicketApplication —Å–æ–∑–¥–∞–Ω–æ")
        Log.d(TAG, "üöÄ TicketApplication —Å–æ–∑–¥–∞–Ω–æ")

        // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        // startMonitoringService()
    }

    private fun setupGlobalExceptionHandler() {
        val defaultHandler = Thread.getDefaultUncaughtExceptionHandler()

        Thread.setDefaultUncaughtExceptionHandler { thread, exception ->
            try {
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–∞—à –≤ –ª–æ–≥
                FileLogger.e(TAG, "üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∞–≤–∞—Ä–∏–π–Ω–æ")
                FileLogger.e(TAG, "Thread: ${thread.name}")
                FileLogger.e(TAG, "Exception: ${exception.javaClass.simpleName}: ${exception.message}")
                FileLogger.e(TAG, "StackTrace:", exception)

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                val prefs = getSharedPreferences("service_state", Context.MODE_PRIVATE)
                val wasMonitoring = prefs.getBoolean("explicitly_stopped", true) == false
                FileLogger.e(TAG, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${if (wasMonitoring) "–ê–ö–¢–ò–í–ï–ù" else "–û–°–¢–ê–ù–û–í–õ–ï–ù"}")

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                Thread.sleep(100) // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø–∏—Å—å
            } catch (_: Exception) {
                // –ï—Å–ª–∏ –¥–∞–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–∞–ª–æ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            }

            // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            defaultHandler?.uncaughtException(thread, exception)
        }

        FileLogger.d(TAG, "‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }

    // –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    private fun startMonitoringService() {
        try {
            // –£–°–¢–ê–†–ï–õ–û: –ë–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º ForegroundService –∏–∑ Application
            // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ ExactAlarmScheduler
            Log.d(TAG, "‚ÑπÔ∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ ForegroundService –∏–∑ Application –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º ExactAlarmScheduler")

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∫–ª—é—á–∏–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
            val prefs = getSharedPreferences("service_state", Context.MODE_PRIVATE)
            if (!prefs.getBoolean("explicitly_stopped", false)) {
                val intervalSeconds = SettingsActivity.getRefreshInterval(this)
                if (ExactAlarmScheduler.canScheduleExactAlarms(this)) {
                    ExactAlarmScheduler.scheduleNextAlarmSeconds(this, intervalSeconds)
                    Log.d(TAG, "‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ç–æ—á–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ $intervalSeconds —Å–µ–∫—É–Ω–¥")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –∏–∑ Application: ${e.message}")
        }
    }

    override fun onLowMemory() {
        super.onLowMemory()
        Log.w(TAG, "‚ö†Ô∏è –ú–∞–ª–æ –ø–∞–º—è—Ç–∏ - –Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
    }

    override fun onTrimMemory(level: Int) {
        super.onTrimMemory(level)
        Log.d(TAG, "üîÑ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏, —É—Ä–æ–≤–µ–Ω—å: $level")
    }
}
