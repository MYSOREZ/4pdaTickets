package ru.fourpda.tickets

import android.content.Context
import android.util.Log

/**
 * –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–∫–µ—Ç–∞–º.
 * –•—Ä–∞–Ω–∏—Ç –∫–ª—é—á–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∏ –ø–æ–¥–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ç–∏–∫–µ—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (–ø–æ updatedAt) –∏–ª–∏ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
 * 
 * –û–°–û–ë–ï–ù–ù–û–°–¢–¨: –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã,
 * —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å—Ç–∞—Ä—ã–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.
 */
object TicketNotifyDeduper {
    private const val TAG = "TicketDeduper"
    private const val PREFS = "ticket_notify_dedup"
    private const val KEY_SEEN = "seen_keys"
    private const val KEY_SESSION_ID = "app_session_id"
    
    private var currentSessionId: Long = 0

    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á —Ç–∏–∫–µ—Ç–∞: id + –≤–µ—Ä—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
     */
    fun key(ticket: TicketInfo): String {
        val base = if (ticket.id.isNotEmpty()) ticket.id else ticket.url
        val version = (ticket.title + "|" + ticket.status + "|" + ticket.lastUpdate).hashCode()
        return "$base:$version"
    }

    /**
     * –°–±—Ä–æ—Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã.
     */
    fun clearOnFirstLaunch(context: Context) {
        if (currentSessionId == 0L) {
            currentSessionId = System.currentTimeMillis()
        }
        
        val prefs = context.getSharedPreferences(PREFS, Context.MODE_PRIVATE)
        val lastSessionId = prefs.getLong(KEY_SESSION_ID, 0L)
        
        if (lastSessionId != currentSessionId) {
            // –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
            prefs.edit()
                .remove(KEY_SEEN)
                .putLong(KEY_SESSION_ID, currentSessionId)
                .apply()
            Log.d(TAG, "üîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: —Å–±—Ä–æ—Å –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        }
    }

    /**
     * –í–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ (–µ—â—ë –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏) —Ç–∏–∫–µ—Ç—ã
     */
    fun filterNew(context: Context, list: List<TicketInfo>): List<TicketInfo> {
        val prefs = context.getSharedPreferences(PREFS, Context.MODE_PRIVATE)
        val seen = prefs.getStringSet(KEY_SEEN, emptySet()) ?: emptySet()
        val filtered = list.filter { !seen.contains(key(it)) }
        
        if (filtered.size < list.size) {
            Log.d(TAG, "üìã –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥—É–±–ª–µ–π: ${list.size - filtered.size} –∏–∑ ${list.size}")
        }
        
        return filtered
    }

    /**
     * –ü–æ–º–µ—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
     */
    fun markShown(context: Context, list: List<TicketInfo>) {
        if (list.isEmpty()) return
        
        val prefs = context.getSharedPreferences(PREFS, Context.MODE_PRIVATE)
        val set = (prefs.getStringSet(KEY_SEEN, emptySet()) ?: emptySet()).toMutableSet()
        var changed = false
        
        list.forEach {
            if (set.add(key(it))) changed = true
        }
        
        if (changed) {
            prefs.edit().putStringSet(KEY_SEEN, set).apply()
            Log.d(TAG, "‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–º–∏: ${list.size} —Ç–∏–∫–µ—Ç–æ–≤")
        }
        
        // –õ—ë–≥–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–∞–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
        if (set.size > 1000) {
            val trimmed = set.toList().takeLast(500).toSet()
            prefs.edit().putStringSet(KEY_SEEN, trimmed).apply()
            Log.d(TAG, "üßπ –û—á–∏—â–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–µ—à: –æ—Å—Ç–∞–≤–ª–µ–Ω–æ 500 –∏–∑ ${set.size} –∑–∞–ø–∏—Å–µ–π")
        }
    }

    /**
     * –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∞–Ω—Ç–∏–¥—É–±–ª–∏–∫–∞—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏/—Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏)
     */
    fun clear(context: Context) {
        context.getSharedPreferences(PREFS, Context.MODE_PRIVATE)
            .edit()
            .remove(KEY_SEEN)
            .remove(KEY_SESSION_ID)
            .apply()
        currentSessionId = 0L
        Log.d(TAG, "üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä–∞")
    }
}

// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
data class TicketInfo(
    val id: String = "",
    val title: String = "",
    val url: String = "",
    val status: String = "",
    val lastUpdate: String = ""
)