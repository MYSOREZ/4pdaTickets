package ru.fourpda.tickets

import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import android.webkit.CookieManager
import android.webkit.WebSettings
import android.webkit.WebView
import android.webkit.WebViewClient
import androidx.core.app.NotificationCompat
import androidx.work.Worker
import androidx.work.WorkerParameters
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.suspendCancellableCoroutine
import kotlinx.coroutines.withTimeoutOrNull
import kotlin.coroutines.resume

/**
 * Worker –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤ –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ FGS
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —Ç–æ—á–Ω—ã–º –±—É–¥–∏–ª—å–Ω–∏–∫–∞–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –ª–µ–≥–∫–∏–π WebView
 */
class QuickCheckWorker(
    context: Context,
    params: WorkerParameters
) : Worker(context, params) {

    companion object {
        private const val TAG = "QuickCheckWorker"
        private const val CHECK_TIMEOUT_MS = 15_000L // –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–æ 15 —Å–µ–∫—É–Ω–¥
        @Volatile
        private var isRunning = false
    }

    override fun doWork(): Result {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–∞–ª–æ–∂–µ–Ω–∏–π
        if (isRunning) {
            Log.w(TAG, "‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return Result.success()
        }
        
        isRunning = true
        val startMessage = "üîç –ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–∫–µ—Ç–æ–≤..."
        Log.d(TAG, startMessage)
        FileLogger.d(TAG, startMessage)
        
        return try {
            runBlocking {
                val success = withTimeoutOrNull(CHECK_TIMEOUT_MS) {
                    performQuickCheck()
                } ?: false
                
                if (success) {
                    val successMessage = "‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                    Log.d(TAG, successMessage)
                    FileLogger.d(TAG, successMessage)
                    updateServiceNotification()
                    Result.success()
                } else {
                    val timeoutMessage = "‚ö†Ô∏è –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤ —Å—Ä–æ–∫"
                    Log.w(TAG, timeoutMessage)
                    FileLogger.w(TAG, timeoutMessage)
                    Result.retry()
                }
            }
        } catch (e: Exception) {
            val errorMessage = "‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ${e.message}"
            Log.e(TAG, errorMessage)
            FileLogger.e(TAG, errorMessage, e)
            Result.failure()
        } finally {
            isRunning = false
        }
    }
    
    private suspend fun performQuickCheck(): Boolean = suspendCancellableCoroutine { continuation ->
        // WebView –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        android.os.Handler(android.os.Looper.getMainLooper()).post {
            try {
                // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WebView —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                val webView = WebView(applicationContext).apply {
                    settings.apply {
                        javaScriptEnabled = true
                        domStorageEnabled = true
                        blockNetworkImage = true // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        setLoadsImagesAutomatically(false)
                        cacheMode = WebSettings.LOAD_NO_CACHE
                        // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–µ–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                        setSupportZoom(false)
                        builtInZoomControls = false
                        displayZoomControls = false
                        allowFileAccess = false
                        allowContentAccess = false
                        databaseEnabled = false
                    }
                    
                    CookieManager.getInstance().setAcceptCookie(true)
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º WebChromeClient –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ console.log
                    webChromeClient = object : android.webkit.WebChromeClient() {
                        override fun onConsoleMessage(consoleMessage: android.webkit.ConsoleMessage?): Boolean {
                            consoleMessage?.message()?.let { message ->
                                if (message.contains("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–û–í:")) {
                                    Log.d(TAG, "üìä –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ console: $message")
                                    // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ console.log
                                    parseStatsFromConsole(message)
                                }
                            }
                            return super.onConsoleMessage(consoleMessage)
                        }
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º JavaScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–≤—è–∑–∏ —Å TicketMonitor
                    var ticketMonitor: TicketMonitor? = null
                    addJavascriptInterface(object {
                        @android.webkit.JavascriptInterface
                        fun onTickets(jsonStr: String) {
                            Log.d(TAG, "üéØ Android.onTickets –≤—ã–∑–≤–∞–Ω: $jsonStr")
                            ticketMonitor?.let { monitor ->
                                android.os.Handler(android.os.Looper.getMainLooper()).post {
                                    try {
                                        monitor.handleTickets(jsonStr)
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ onTickets: ${e.message}")
                                    }
                                }
                            }
                        }
                        
                        @android.webkit.JavascriptInterface
                        fun onNoTickets() {
                            Log.d(TAG, "üéØ Android.onNoTickets –≤—ã–∑–≤–∞–Ω")
                            ticketMonitor?.let { monitor ->
                                android.os.Handler(android.os.Looper.getMainLooper()).post {
                                    try {
                                        monitor.handleNoTickets()
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ onNoTickets: ${e.message}")
                                    }
                                }
                            }
                        }
                        
                        @android.webkit.JavascriptInterface
                        fun onFullStats(total: Int, processed: Int, unprocessed: Int, inProgress: Int) {
                            Log.d(TAG, "üéØ Android.onFullStats –≤—ã–∑–≤–∞–Ω: $total,$processed,$unprocessed,$inProgress")
                            ticketMonitor?.let { monitor ->
                                android.os.Handler(android.os.Looper.getMainLooper()).post {
                                    try {
                                        monitor.handleFullStats(total, processed, unprocessed, inProgress)
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ onFullStats: ${e.message}")
                                    }
                                }
                            }
                        }
                        
                        @android.webkit.JavascriptInterface
                        fun logDebug(msg: String) {
                            Log.d(TAG, "üéØ Android.logDebug: $msg")
                            ticketMonitor?.let { monitor ->
                                android.os.Handler(android.os.Looper.getMainLooper()).post {
                                    try {
                                        monitor.handleLogDebug(msg)
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ logDebug: ${e.message}")
                                    }
                                }
                            }
                        }
                        
                        @android.webkit.JavascriptInterface
                        fun err(msg: String) {
                            Log.e(TAG, "üéØ Android.err: $msg")
                            ticketMonitor?.let { monitor ->
                                android.os.Handler(android.os.Looper.getMainLooper()).post {
                                    try {
                                        monitor.handleError(msg)
                                    } catch (e: Exception) {
                                        Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ err: ${e.message}")
                                    }
                                }
                            }
                        }
                    }, "Android")
                    
                    webViewClient = object : WebViewClient() {
                        override fun onPageFinished(view: WebView?, url: String?) {
                            if (url?.contains("act=ticket") == true) {
                                Log.d(TAG, "üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–∏–∫–µ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
                                
                                // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π TicketMonitor –¢–û–õ–¨–ö–û –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                                val monitor = TicketMonitor(
                                    context = applicationContext,
                                    webView = this@apply
                                ) { status ->
                                    Log.d(TAG, "üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: $status")
                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                                    saveTicketStats(status)
                                }
                                
                                // –°–≤—è–∑—ã–≤–∞–µ–º —Å JavaScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
                                ticketMonitor = monitor
                                
                                monitor.startMonitoring()
                                
                                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JavaScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                                    Log.d(TAG, "üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JavaScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
                                    
                                    // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π JavaScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ
                                    val initJs = """
                                        window.TicketJS = {
                                            onTickets: function(jsonStr) {
                                                console.log('TicketJS.onTickets called with: ' + jsonStr);
                                                Android.onTickets(jsonStr);
                                            },
                                            onNoTickets: function() {
                                                console.log('TicketJS.onNoTickets called');
                                                Android.onNoTickets();
                                            },
                                            onFullStats: function(total, processed, unprocessed, inProgress) {
                                                console.log('TicketJS.onFullStats called: ' + total + ',' + processed + ',' + unprocessed + ',' + inProgress);
                                                Android.onFullStats(total, processed, unprocessed, inProgress);
                                            },
                                            logDebug: function(msg) {
                                                console.log('TicketJS.logDebug: ' + msg);
                                                Android.logDebug(msg);
                                            },
                                            err: function(msg) {
                                                console.error('TicketJS.err: ' + msg);
                                                Android.err(msg);
                                            }
                                        };
                                        console.log('TicketJS interface initialized');
                                    """.trimIndent()
                                    
                                    evaluateJavascript(initJs) { result ->
                                        Log.d(TAG, "üîß JavaScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: $result")
                                        
                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                                        evaluateJavascript("typeof TicketJS !== 'undefined'") { checkResult ->
                                            Log.d(TAG, "üîß TicketJS –¥–æ—Å—Ç—É–ø–µ–Ω: $checkResult")
                                            
                                            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç–∏–∫–µ—Ç–æ–≤
                                            android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                                                Log.d(TAG, "üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç–∏–∫–µ—Ç–æ–≤")
                                                monitor.searchNow()
                                                
                                                // –ó–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥
                                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                                                    Log.d(TAG, "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                                                    monitor.stopMonitoring()
                                                    cleanupWebView(this@apply)
                                                    if (continuation.isActive) {
                                                        continuation.resume(true)
                                                    }
                                                }, 6000)
                                            }, 1000)
                                        }
                                    }
                                }, 1000)
                            }
                        }
                        
                        override fun onReceivedError(view: WebView?, errorCode: Int, description: String?, failingUrl: String?) {
                            Log.e(TAG, "‚ùå WebView –æ—à–∏–±–∫–∞: $description")
                            cleanupWebView(view)
                            if (continuation.isActive) {
                                continuation.resume(false)
                            }
                        }
                    }
                    
                    loadUrl("https://4pda.to/forum/index.php?act=ticket")
                }
                
                // –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç - 12 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 20
                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({
                    if (continuation.isActive) {
                        Log.w(TAG, "‚è∞ –¢–∞–π–º–∞—É—Ç –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
                        cleanupWebView(webView)
                        continuation.resume(false)
                    }
                }, 12_000)
                
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebView: ${e.message}")
                if (continuation.isActive) {
                    continuation.resume(false)
                }
            }
        }
    }
    
    private fun cleanupWebView(webView: WebView?) {
        try {
            webView?.apply {
                stopLoading()
                clearHistory()
                clearCache(true)
                loadUrl("about:blank")
                onPause()
                removeAllViews()
                destroy()
            }
        } catch (e: Exception) {
            Log.w(TAG, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ WebView: ${e.message}")
        }
    }
    
    private fun saveTicketStats(status: String) {
        try {
            // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            val prefs = applicationContext.getSharedPreferences("ticket_stats", Context.MODE_PRIVATE)
            
            // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏)
            prefs.edit().putBoolean("is_user_authed", true).apply()
            
            // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            // –§–æ—Ä–º–∞—Ç: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –≤—Å–µ–≥–æ=6, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=6, –Ω–æ–≤—ã–µ=0, –≤ —Ä–∞–±–æ—Ç–µ=0"
            if (status.contains("–≤—Å–µ–≥–æ=") && status.contains("–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=")) {
                val totalMatch = Regex("–≤—Å–µ–≥–æ=(\\d+)").find(status)
                val processedMatch = Regex("–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=(\\d+)").find(status)
                val newMatch = Regex("–Ω–æ–≤—ã–µ=(\\d+)").find(status)
                val inProgressMatch = Regex("–≤ —Ä–∞–±–æ—Ç–µ=(\\d+)").find(status)
                
                val total = totalMatch?.groupValues?.get(1)?.toIntOrNull() ?: 0
                val processed = processedMatch?.groupValues?.get(1)?.toIntOrNull() ?: 0
                val newTickets = newMatch?.groupValues?.get(1)?.toIntOrNull() ?: 0
                val inProgress = inProgressMatch?.groupValues?.get(1)?.toIntOrNull() ?: 0
                val unprocessed = total - processed
                
                prefs.edit()
                    .putInt("total_tickets", total)
                    .putInt("processed_tickets", processed)
                    .putInt("unprocessed_tickets", unprocessed)
                    .putInt("new_tickets", newTickets)
                    .putInt("in_progress_tickets", inProgress)
                    .apply()
                
                Log.d(TAG, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ=$total, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=$processed, –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=$unprocessed, –Ω–æ–≤—ã–µ=$newTickets, –≤ —Ä–∞–±–æ—Ç–µ=$inProgress")
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                val intent = Intent("TICKET_STATISTICS_UPDATE").apply {
                    putExtra("total_tickets", total)
                    putExtra("processed_tickets", processed)
                    putExtra("unprocessed_tickets", unprocessed)
                    putExtra("new_tickets", newTickets)
                    putExtra("in_progress_tickets", inProgress)
                }
                androidx.localbroadcastmanager.content.LocalBroadcastManager.getInstance(applicationContext)
                    .sendBroadcast(intent)
                
            } else {
                Log.d(TAG, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${e.message}")
        }
    }
    
    private fun parseStatsFromConsole(message: String) {
        try {
            // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–û–í: –≤—Å–µ–≥–æ=6, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=6, –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=0, –≤ —Ä–∞–±–æ—Ç–µ=0."
            val totalMatch = Regex("–≤—Å–µ–≥–æ=(\\d+)").find(message)
            val processedMatch = Regex("–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=(\\d+)").find(message)
            val unprocessedMatch = Regex("–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=(\\d+)").find(message)
            val inProgressMatch = Regex("–≤ —Ä–∞–±–æ—Ç–µ=(\\d+)").find(message)
            
            val total = totalMatch?.groupValues?.get(1)?.toIntOrNull() ?: 0
            val processed = processedMatch?.groupValues?.get(1)?.toIntOrNull() ?: 0
            val unprocessed = unprocessedMatch?.groupValues?.get(1)?.toIntOrNull() ?: 0
            val inProgress = inProgressMatch?.groupValues?.get(1)?.toIntOrNull() ?: 0
            
            if (total > 0 || processed > 0) {
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                val prefs = applicationContext.getSharedPreferences("ticket_stats", Context.MODE_PRIVATE)
                val prevUnprocessed = prefs.getInt("unprocessed_tickets", 0)
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                prefs.edit()
                    .putBoolean("is_user_authed", true)
                    .putInt("total_tickets", total)
                    .putInt("processed_tickets", processed)
                    .putInt("unprocessed_tickets", unprocessed)
                    .putInt("in_progress_tickets", inProgress)
                    .apply()
                
                Log.d(TAG, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ console: –≤—Å–µ–≥–æ=$total, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=$processed, –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=$unprocessed, –≤ —Ä–∞–±–æ—Ç–µ=$inProgress")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
                if (unprocessed > prevUnprocessed) {
                    val newTickets = unprocessed - prevUnprocessed
                    Log.d(TAG, "üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $newTickets –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤! (–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ —á–µ—Ä–µ–∑ TicketMonitor)")
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                updateServiceNotification()
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ console: ${e.message}")
        }
    }
    

    

    
    private fun updateServiceNotification() {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NotificationUpdater
            NotificationUpdater.updateServiceNotification(applicationContext)
            Log.d(TAG, "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${e.message}")
        }
    }
}