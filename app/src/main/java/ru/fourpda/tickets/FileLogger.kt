package ru.fourpda.tickets

import android.content.Context
import android.os.Build
import android.os.Environment
import android.util.Log
import java.io.File
import java.io.FileWriter
import java.text.SimpleDateFormat
import java.util.*

/**
 * –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ /storage/emulated/0/4pdaTickets/logs/
 */
object FileLogger {
    private const val TAG = "FileLogger"
    private const val LOG_DIR = "4pdaTickets"
    private const val LOG_SUBDIR = "logs"
    private const val MAX_LOG_SIZE = 5 * 1024 * 1024 // 5 MB
    private const val MAX_LOG_FILES = 5
    
    private val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", Locale.getDefault())
    private val fileNameFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
    
    private var isInitialized = false
    private var logDir: File? = null
    
    fun init(context: Context) {
        try {
            if (isInitialized) return
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            if (Environment.getExternalStorageState() != Environment.MEDIA_MOUNTED) {
                Log.w(TAG, "‚ö†Ô∏è –í–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                val hasPermission = context.checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE) == 
                    android.content.pm.PackageManager.PERMISSION_GRANTED
                if (!hasPermission) {
                    Log.w(TAG, "‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å –≤–æ –≤–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                    return
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
            val externalStorage = Environment.getExternalStorageDirectory()
            logDir = File(externalStorage, "$LOG_DIR/$LOG_SUBDIR")
            
            if (!logDir!!.exists()) {
                val created = logDir!!.mkdirs()
                if (created) {
                    Log.d(TAG, "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤: ${logDir!!.absolutePath}")
                } else {
                    Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤: ${logDir!!.absolutePath}")
                    Log.e(TAG, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
                    return
                }
            }
            
            isInitialized = true
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            cleanOldLogs()
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            writeLog("SYSTEM", "üì± FileLogger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–∞–ø–∫–∞: ${logDir!!.absolutePath}")
            writeLog("SYSTEM", "üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –í–µ—Ä—Å–∏—è Android: ${android.os.Build.VERSION.RELEASE}")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FileLogger: ${e.message}")
        }
    }
    
    fun d(tag: String, message: String) {
        Log.d(tag, message)
        writeLog(tag, "DEBUG: $message")
    }
    
    fun i(tag: String, message: String) {
        Log.i(tag, message)
        writeLog(tag, "INFO: $message")
    }
    
    fun w(tag: String, message: String) {
        Log.w(tag, message)
        writeLog(tag, "WARN: $message")
    }
    
    fun e(tag: String, message: String) {
        Log.e(tag, message)
        writeLog(tag, "ERROR: $message")
    }
    
    fun e(tag: String, message: String, throwable: Throwable) {
        Log.e(tag, message, throwable)
        writeLog(tag, "ERROR: $message\n${throwable.stackTraceToString()}")
    }
    
    private fun writeLog(tag: String, message: String) {
        if (!isInitialized || logDir == null) return
        
        try {
            val currentDate = Date()
            val fileName = "4pda_tickets_${fileNameFormat.format(currentDate)}.log"
            val logFile = File(logDir, fileName)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if (logFile.exists() && logFile.length() > MAX_LOG_SIZE) {
                rotateLogFile(logFile)
            }
            
            val timestamp = dateFormat.format(currentDate)
            val logEntry = "[$timestamp] [$tag] $message\n"
            
            FileWriter(logFile, true).use { writer ->
                writer.append(logEntry)
                writer.flush()
            }
            
        } catch (e: Exception) {
            // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª: ${e.message}")
        }
    }
    
    private fun rotateLogFile(currentFile: File) {
        try {
            val baseName = currentFile.nameWithoutExtension
            val extension = currentFile.extension
            
            // –°–¥–≤–∏–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
            for (i in MAX_LOG_FILES - 1 downTo 1) {
                val oldFile = File(currentFile.parent, "${baseName}_$i.$extension")
                val newFile = File(currentFile.parent, "${baseName}_${i + 1}.$extension")
                
                if (oldFile.exists()) {
                    if (i == MAX_LOG_FILES - 1) {
                        oldFile.delete() // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π
                    } else {
                        oldFile.renameTo(newFile)
                    }
                }
            }
            
            // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
            val rotatedFile = File(currentFile.parent, "${baseName}_1.$extension")
            currentFile.renameTo(rotatedFile)
            
            Log.d(TAG, "üîÑ –õ–æ–≥-—Ñ–∞–π–ª —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω: ${rotatedFile.name}")
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: ${e.message}")
        }
    }
    
    private fun cleanOldLogs() {
        try {
            logDir?.listFiles()?.let { files ->
                val logFiles = files.filter { it.name.endsWith(".log") }
                    .sortedByDescending { it.lastModified() }
                
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_LOG_FILES —Ñ–∞–π–ª–æ–≤
                if (logFiles.size > MAX_LOG_FILES) {
                    logFiles.drop(MAX_LOG_FILES).forEach { file ->
                        if (file.delete()) {
                            Log.d(TAG, "üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥-—Ñ–∞–π–ª: ${file.name}")
                        }
                    }
                }
                
                // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
                val weekAgo = System.currentTimeMillis() - (7 * 24 * 60 * 60 * 1000L)
                logFiles.filter { it.lastModified() < weekAgo }.forEach { file ->
                    if (file.delete()) {
                        Log.d(TAG, "üóëÔ∏è –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ª–æ–≥-—Ñ–∞–π–ª: ${file.name}")
                    }
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: ${e.message}")
        }
    }
    
    fun getLogFiles(): List<File> {
        return try {
            logDir?.listFiles()?.filter { it.name.endsWith(".log") }
                ?.sortedByDescending { it.lastModified() } ?: emptyList()
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤: ${e.message}")
            emptyList()
        }
    }
    
    fun getLogDirectory(): String? {
        return logDir?.absolutePath
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ –Ω–∞ –¥–∏—Å–∫
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
     */
    fun flush() {
        try {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            writeLog("SYSTEM", "üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}")
        }
    }
    
    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    fun logAppState(context: Context) {
        try {
            val prefs = context.getSharedPreferences("service_state", Context.MODE_PRIVATE)
            val explicitlyStopped = prefs.getBoolean("explicitly_stopped", true)
            val stoppedByTimeout = prefs.getBoolean("stopped_by_timeout", false)
            val timeoutTimestamp = prefs.getLong("timeout_timestamp", 0)
            
            writeLog("STATE", "üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
            writeLog("STATE", "  - –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: $explicitlyStopped")
            writeLog("STATE", "  - –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–∞–π–º-–∞—É—Ç—É: $stoppedByTimeout")
            if (timeoutTimestamp > 0) {
                val timeoutDate = java.util.Date(timeoutTimestamp)
                writeLog("STATE", "  - –í—Ä–µ–º—è —Ç–∞–π–º-–∞—É—Ç–∞: ${dateFormat.format(timeoutDate)}")
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            val manager = context.getSystemService(Context.ACTIVITY_SERVICE) as android.app.ActivityManager
            val isServiceRunning = manager.getRunningServices(100).any { 
                it.service.className == "ru.fourpda.tickets.ForegroundMonitorService" 
            }
            writeLog("STATE", "  - ForegroundService –∞–∫—Ç–∏–≤–µ–Ω: $isServiceRunning")
            
        } catch (e: Exception) {
            writeLog("STATE", "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${e.message}")
        }
    }
}