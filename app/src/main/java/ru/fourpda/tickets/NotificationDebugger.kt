package ru.fourpda.tickets

import android.app.NotificationManager
import android.content.Context
import android.os.Build
import android.util.Log

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
object NotificationDebugger {
    private const val TAG = "NotificationDebugger"

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    fun debugNotificationSystem(context: Context): String {
        val debug = StringBuilder()
        debug.appendLine("=== –û–¢–õ–ê–î–ö–ê –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===")

        // 1. –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        debug.appendLine("üì± Android –≤–µ—Ä—Å–∏—è: ${Build.VERSION.RELEASE} (API ${Build.VERSION.SDK_INT})")
        debug.appendLine("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${Build.MANUFACTURER} ${Build.MODEL}")

        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

        // 2. –û–±—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            val areNotificationsEnabled = notificationManager.areNotificationsEnabled()
            debug.appendLine("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã: $areNotificationsEnabled")
        }

        // 3. –í–∞–∂–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è Android 7.1+)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1) {
            val importance = notificationManager.importance
            debug.appendLine("‚ö†Ô∏è –í–∞–∂–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $importance (${getImportanceDescription(importance)})")
        }

        // 4. –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è Android 8.0+)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            debug.appendLine("\n=== –ö–ê–ù–ê–õ–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===")

            val channels = notificationManager.notificationChannels
            debug.appendLine("üì∫ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: ${channels.size}")

            channels.forEach { channel ->
                debug.appendLine("üì∫ –ö–∞–Ω–∞–ª: ${channel.id}")
                debug.appendLine("   üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: ${channel.name}")
                debug.appendLine("   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${channel.description ?: "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}")
                debug.appendLine("   ‚ö†Ô∏è –í–∞–∂–Ω–æ—Å—Ç—å: ${channel.importance} (${getImportanceDescription(channel.importance)})")
                debug.appendLine("   üîî –ó–≤—É–∫: ${if (channel.sound != null) "–í–∫–ª—é—á–µ–Ω" else "–û—Ç–∫–ª—é—á–µ–Ω"}")
                debug.appendLine("   üì≥ –í–∏–±—Ä–∞—Ü–∏—è: ${channel.shouldVibrate()}")
                debug.appendLine("   üí° –°–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: ${channel.shouldShowLights()}")
                debug.appendLine("   üè∑Ô∏è –ó–Ω–∞—á–æ–∫: ${channel.canShowBadge()}")
                debug.appendLine("")
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
            checkSpecificChannel(notificationManager, NotificationChannels.SERVICE_CHANNEL_ID, debug)
            checkSpecificChannel(notificationManager, NotificationChannels.TICKETS_CHANNEL_ID, debug)
        }

        // 5. –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            debug.appendLine("=== –ê–ö–¢–ò–í–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===")
            val activeNotifications = notificationManager.activeNotifications
            debug.appendLine("üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${activeNotifications.size}")

            activeNotifications.forEach { statusBarNotification ->
                debug.appendLine("üì± ID: ${statusBarNotification.id}, Tag: ${statusBarNotification.tag ?: "null"}")
                debug.appendLine("   üìã –ü–∞–∫–µ—Ç: ${statusBarNotification.packageName}")
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    debug.appendLine("   üì∫ –ö–∞–Ω–∞–ª: ${statusBarNotification.notification.channelId}")
                }
                debug.appendLine("")
            }
        }

        val result = debug.toString()
        Log.d(TAG, result)
        return result
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    private fun checkSpecificChannel(
        notificationManager: NotificationManager,
        channelId: String,
        debug: StringBuilder
    ) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = notificationManager.getNotificationChannel(channelId)
            if (channel != null) {
                debug.appendLine("‚úÖ –ö–∞–Ω–∞–ª '$channelId' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            } else {
                debug.appendLine("‚ùå –ö–∞–Ω–∞–ª '$channelId' –ù–ï –ù–ê–ô–î–ï–ù!")
            }
        }
    }

    /**
     * –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–∞–∂–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    private fun getImportanceDescription(importance: Int): String {
        return when (importance) {
            NotificationManager.IMPORTANCE_NONE -> "NONE (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã)"
            NotificationManager.IMPORTANCE_MIN -> "MIN (—Ç–æ–ª—å–∫–æ –≤ –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)"
            NotificationManager.IMPORTANCE_LOW -> "LOW (–±–µ–∑ –∑–≤—É–∫–∞ –∏ –≤–∏–±—Ä–∞—Ü–∏–∏)"
            NotificationManager.IMPORTANCE_DEFAULT -> "DEFAULT (—Å–æ –∑–≤—É–∫–æ–º)"
            NotificationManager.IMPORTANCE_HIGH -> "HIGH (—Å–æ –∑–≤—É–∫–æ–º –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º–∏)"
            else -> "UNSPECIFIED ($importance)"
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
     */
    fun testNotification(context: Context, channelId: String, title: String, text: String): String {
        return try {
            val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

            val notification = androidx.core.app.NotificationCompat.Builder(context, channelId)
                .setContentTitle("üß™ –¢–ï–°–¢: $title")
                .setContentText(text)
                .setSmallIcon(android.R.drawable.ic_dialog_info)
                .setPriority(androidx.core.app.NotificationCompat.PRIORITY_HIGH)
                .setAutoCancel(true)
                .build()

            val notificationId = System.currentTimeMillis().toInt()
            notificationManager.notify(notificationId, notification)

            Log.d(TAG, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: $notificationId)")
            "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        } catch (e: Exception) {
            val error = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${e.message}"
            Log.e(TAG, error, e)
            error
        }
    }

    /**
     * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–æ–±—â–µ
     */
    fun quickCheck(context: Context): String {
        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

        return buildString {
            appendLine("=== –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê ===")

            // –†–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                val enabled = notificationManager.areNotificationsEnabled()
                appendLine("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${if (enabled) "–†–ê–ó–†–ï–®–ï–ù–´" else "–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´"}")
                if (!enabled) {
                    appendLine("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã!")
                }
            }

            // –ï—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                val serviceChannel = notificationManager.getNotificationChannel(NotificationChannels.SERVICE_CHANNEL_ID)
                val ticketsChannel = notificationManager.getNotificationChannel(NotificationChannels.TICKETS_CHANNEL_ID)

                appendLine("üì∫ –ö–∞–Ω–∞–ª —Å–ª—É–∂–±—ã: ${if (serviceChannel != null) "OK" else "–û–¢–°–£–¢–°–¢–í–£–ï–¢"}")
                appendLine("üì∫ –ö–∞–Ω–∞–ª —Ç–∏–∫–µ—Ç–æ–≤: ${if (ticketsChannel != null) "OK" else "–û–¢–°–£–¢–°–¢–í–£–ï–¢"}")

                if (serviceChannel == null || ticketsChannel == null) {
                    appendLine("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ —Å–æ–∑–¥–∞–Ω—ã!")
                }
            }
        }
    }
}
