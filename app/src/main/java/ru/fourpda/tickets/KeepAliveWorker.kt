package ru.fourpda.tickets

import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import androidx.work.*
import java.util.concurrent.TimeUnit

/**
 * Worker –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
 * WorkManager –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤ –∫ —É—Å—ã–ø–ª–µ–Ω–∏—é —á–µ–º –æ–±—ã—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
 */
class KeepAliveWorker(
    context: Context,
    params: WorkerParameters
) : Worker(context, params) {

    companion object {
        private const val TAG = "KeepAliveWorker"
        const val WORK_NAME = "KeepAliveWork"
        const val KEEP_ALIVE_INTERVAL_MINUTES = 15L // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

        fun scheduleWork(context: Context) {
            val constraints = Constraints.Builder()
                .setRequiredNetworkType(NetworkType.CONNECTED)
                .build()

            val keepAliveRequest = PeriodicWorkRequestBuilder<KeepAliveWorker>(
                KEEP_ALIVE_INTERVAL_MINUTES, TimeUnit.MINUTES,
                5, TimeUnit.MINUTES // flex interval
            )
                .setConstraints(constraints)
                .setBackoffCriteria(
                    BackoffPolicy.LINEAR,
                    WorkRequest.MIN_BACKOFF_MILLIS,
                    TimeUnit.MILLISECONDS
                )
                .addTag(WORK_NAME)
                .build()

            WorkManager.getInstance(context).enqueueUniquePeriodicWork(
                WORK_NAME,
                ExistingPeriodicWorkPolicy.REPLACE,
                keepAliveRequest
            )

            Log.d(TAG, "‚úÖ KeepAliveWorker –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: $KEEP_ALIVE_INTERVAL_MINUTES –º–∏–Ω)")
        }

        fun cancelWork(context: Context) {
            WorkManager.getInstance(context).cancelUniqueWork(WORK_NAME)
            Log.d(TAG, "üõë KeepAliveWorker –æ—Ç–º–µ–Ω–µ–Ω")
        }
    }

    override fun doWork(): Result {
        Log.d(TAG, "üîÑ KeepAliveWorker: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞...")

        return try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            val prefs = applicationContext.getSharedPreferences("service_state", Context.MODE_PRIVATE)
            if (prefs.getBoolean("explicitly_stopped", false)) {
                Log.d(TAG, "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - KeepAlive –Ω–µ –Ω—É–∂–µ–Ω")
                return Result.success()
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (!isUserAuthenticated()) {
                Log.d(TAG, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                return Result.success()
            }

            // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –≤–º–µ—Å—Ç–æ FGS
            if (!ExactAlarmScheduler.canScheduleExactAlarms(applicationContext)) {
                Log.w(TAG, "‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏")
                return Result.success()
            }
            
            Log.d(TAG, "‚úÖ –¢–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, FGS –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            val intervalSeconds = SettingsActivity.getRefreshInterval(applicationContext)
            ExactAlarmScheduler.scheduleNextAlarmSeconds(applicationContext, intervalSeconds)
            Log.d(TAG, "‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ç–æ—á–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ $intervalSeconds —Å–µ–∫—É–Ω–¥")

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            saveLastCheckTime()

            Result.success()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤ KeepAliveWorker: ${e.message}")
            Result.retry()
        }
    }

    private fun isUserAuthenticated(): Boolean {
        return try {
            val cookieManager = android.webkit.CookieManager.getInstance()
            val cookies = cookieManager.getCookie("https://4pda.to") ?: ""
            
            cookies.contains("member_id=") && 
            cookies.contains("pass_hash=") && 
            !cookies.contains("member_id=0")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}")
            false
        }
    }

    private fun isServiceRunning(): Boolean {
        return try {
            val manager = applicationContext.getSystemService(Context.ACTIVITY_SERVICE) as android.app.ActivityManager
            val runningServices = manager.getRunningServices(100)
            
            runningServices.any { 
                ForegroundMonitorService::class.java.name == it.service.className 
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞: ${e.message}")
            false
        }
    }

    private fun startMonitoringService() {
        // –£–°–¢–ê–†–ï–õ–û: –ë–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º ForegroundService
        // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ ExactAlarmScheduler
        Log.d(TAG, "‚ÑπÔ∏è startMonitoringService() —É—Å—Ç–∞—Ä–µ–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º ExactAlarmScheduler")
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            val intervalSeconds = SettingsActivity.getRefreshInterval(applicationContext)
            ExactAlarmScheduler.scheduleNextAlarmSeconds(applicationContext, intervalSeconds)
            Log.d(TAG, "‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ç–æ—á–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ $intervalSeconds —Å–µ–∫—É–Ω–¥")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞: ${e.message}")
        }
    }

    private fun sendPingToService() {
        val pingIntent = Intent(applicationContext, ForegroundMonitorService::class.java).apply {
            action = "ru.fourpda.tickets.action.PING"
        }
        applicationContext.startService(pingIntent)
        Log.d(TAG, "üì° –ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å—É")
    }

    private fun saveLastCheckTime() {
        val prefs = applicationContext.getSharedPreferences("keep_alive_prefs", Context.MODE_PRIVATE)
        prefs.edit().putLong("last_check_time", System.currentTimeMillis()).apply()
    }
}
