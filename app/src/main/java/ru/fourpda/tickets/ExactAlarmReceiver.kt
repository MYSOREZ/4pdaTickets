package ru.fourpda.tickets

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.os.PowerManager
import android.util.Log
import androidx.work.OneTimeWorkRequestBuilder
import androidx.work.WorkManager

/**
 * –†–µ—Å–∏–≤–µ—Ä –¥–ª—è —Ç–æ—á–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ FGS
 */
class ExactAlarmReceiver : BroadcastReceiver() {
    
    companion object {
        private const val TAG = "ExactAlarmReceiver"
    }
    
    override fun onReceive(context: Context, intent: Intent) {
        val message = "‚è∞ –¢–æ—á–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª: ${intent.action}"
        Log.d(TAG, message)
        FileLogger.d(TAG, message)
        
        if (intent.action != ExactAlarmScheduler.ACTION_EXACT_ALARM) return
        
        // –ü–æ–ª—É—á–∞–µ–º WakeLock –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        val powerManager = context.getSystemService(Context.POWER_SERVICE) as PowerManager
        val wakeLock = powerManager.newWakeLock(
            PowerManager.PARTIAL_WAKE_LOCK,
            "4pdaTickets:ExactAlarmWakeLock"
        )
        
        try {
            wakeLock.acquire(30_000L) // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            val prefs = context.getSharedPreferences("service_state", Context.MODE_PRIVATE)
            if (prefs.getBoolean("explicitly_stopped", false)) {
                val stopMessage = "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º - –æ—Ç–º–µ–Ω—è–µ–º –±—É–¥–∏–ª—å–Ω–∏–∫–∏"
                Log.d(TAG, stopMessage)
                FileLogger.i(TAG, stopMessage)
                ExactAlarmScheduler.cancelAlarm(context)
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if (!isUserAuthenticated(context)) {
                Log.d(TAG, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                scheduleNext(context)
                return
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å proper constraints
            val constraints = androidx.work.Constraints.Builder()
                .setRequiredNetworkType(androidx.work.NetworkType.CONNECTED)
                .setRequiresBatteryNotLow(false) // –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–∞—Ä—è–¥–µ
                .build()
            
            val workRequest = OneTimeWorkRequestBuilder<QuickCheckWorker>()
                .setConstraints(constraints)
                .addTag("exact_alarm_check")
                .setBackoffCriteria(
                    androidx.work.BackoffPolicy.LINEAR,
                    androidx.work.WorkRequest.MIN_BACKOFF_MILLIS,
                    java.util.concurrent.TimeUnit.MILLISECONDS
                )
                .build()
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º enqueueUniqueWork –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏–π
            WorkManager.getInstance(context).enqueueUniqueWork(
                "ticket_check_work",
                androidx.work.ExistingWorkPolicy.REPLACE,
                workRequest
            )
            val workMessage = "üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
            Log.d(TAG, workMessage)
            FileLogger.d(TAG, workMessage)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            NotificationUpdater.updateServiceNotification(context)
            
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±—É–¥–∏–ª—å–Ω–∏–∫
            scheduleNext(context)
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –≤ ExactAlarmReceiver: ${e.message}")
        } finally {
            if (wakeLock.isHeld) {
                wakeLock.release()
            }
        }
    }
    
    private fun scheduleNext(context: Context) {
        val intervalSeconds = SettingsActivity.getRefreshInterval(context)
        
        Log.d(TAG, "üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±—É–¥–∏–ª—å–Ω–∏–∫ —á–µ—Ä–µ–∑ $intervalSeconds —Å–µ–∫—É–Ω–¥")
        ExactAlarmScheduler.scheduleNextAlarmSeconds(context, intervalSeconds)
    }
    
    private fun isUserAuthenticated(context: Context): Boolean {
        return try {
            val cookieManager = android.webkit.CookieManager.getInstance()
            val cookies = cookieManager.getCookie("https://4pda.to") ?: ""
            
            cookies.contains("member_id=") && 
            cookies.contains("pass_hash=") && 
            !cookies.contains("member_id=0")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}")
            false
        }
    }
}