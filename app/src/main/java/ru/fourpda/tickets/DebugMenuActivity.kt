package ru.fourpda.tickets

import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import ru.fourpda.tickets.databinding.ActivityDebugMenuBinding

class DebugMenuActivity : AppCompatActivity() {

    companion object {
        private const val TAG = "DebugMenuActivity"
    }

    private lateinit var ui: ActivityDebugMenuBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        supportActionBar?.hide()

        ui = ActivityDebugMenuBinding.inflate(layoutInflater)
        setContentView(ui.root)

        Log.d(TAG, "=== DEBUG MENU OPENED ===")

        initUI()
        updateDebugStatus()
    }

    private fun initUI() {
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è debug —Ä–µ–∂–∏–º–∞
        ui.btnToggleDebugMode.setOnClickListener {
            val isEnabled = !DebugUtils.isDebugModeEnabled(this)
            DebugUtils.setDebugMode(this, isEnabled)
            updateDebugStatus()
            Toast.makeText(this, "Debug —Ä–µ–∂–∏–º ${if (isEnabled) "–≤–∫–ª—é—á–µ–Ω" else "–≤—ã–∫–ª—é—á–µ–Ω"}", Toast.LENGTH_SHORT).show()
        }

        // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ui.btnPresetMiui14.setOnClickListener {
            DebugUtils.applyPresetConfiguration(this, "miui_14")
            updateDebugStatus()
            Toast.makeText(this, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è MIUI 14", Toast.LENGTH_SHORT).show()
        }

        ui.btnPresetOppoColorOS.setOnClickListener {
            DebugUtils.applyPresetConfiguration(this, "oppo_coloros")
            updateDebugStatus()
            Toast.makeText(this, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è OPPO ColorOS", Toast.LENGTH_SHORT).show()
        }

        ui.btnPresetHuaweiEMUI.setOnClickListener {
            DebugUtils.applyPresetConfiguration(this, "huawei_emui")
            updateDebugStatus()
            Toast.makeText(this, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è Huawei EMUI", Toast.LENGTH_SHORT).show()
        }

        ui.btnPresetSamsungOneUI.setOnClickListener {
            DebugUtils.applyPresetConfiguration(this, "samsung_oneui")
            updateDebugStatus()
            Toast.makeText(this, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è Samsung One UI", Toast.LENGTH_SHORT).show()
        }

        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ui.btnResetDebugSettings.setOnClickListener {
            DebugUtils.resetDebugSettings(this)
            updateDebugStatus()
            Toast.makeText(this, "–í—Å–µ debug –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã", Toast.LENGTH_SHORT).show()
        }

        // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MiuiUtils
        ui.btnTestMiuiUtils.setOnClickListener {
            testMiuiUtils()
        }

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        ui.btnDebugNotifications.setOnClickListener {
            debugNotifications()
        }

        // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        ui.btnTestNotifications.setOnClickListener {
            testNotifications()
        }

        // –ö–Ω–æ–ø–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
        ui.btnDebugIntents.setOnClickListener {
            debugIntents()
        }

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è MiuiSetupActivity
        ui.btnOpenMiuiSetup.setOnClickListener {
            openMiuiSetupActivity()
        }

        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        ui.btnViewLogs.setOnClickListener {
            viewLogFiles()
        }

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ui.btnClose.setOnClickListener {
            finish()
        }
    }

    private fun updateDebugStatus() {
        val isDebugEnabled = DebugUtils.isDebugModeEnabled(this)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        ui.btnToggleDebugMode.text = if (isDebugEnabled) "–í—ã–∫–ª—é—á–∏—Ç—å Debug —Ä–µ–∂–∏–º" else "–í–∫–ª—é—á–∏—Ç—å Debug —Ä–µ–∂–∏–º"

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        val visibility = if (isDebugEnabled) View.VISIBLE else View.GONE
        ui.layoutDebugControls.visibility = visibility

        if (isDebugEnabled) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏
            val status = DebugUtils.getDebugStatus(this)
            val statusText = buildString {
                append("üîß Debug —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω\n\n")
                append("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n")
                append("‚Ä¢ MIUI: ${if (status["simulate_miui"] == true) "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"}\n")
                append("‚Ä¢ –ö–∏—Ç–∞–π—Å–∫–∞—è –ø—Ä–æ—à–∏–≤–∫–∞: ${if (status["simulate_chinese_rom"] == true) "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"}\n")
                append("‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: ${status["simulate_manufacturer"] ?: "–Ω–µ –∑–∞–¥–∞–Ω"}\n")
                append("‚Ä¢ –ë—Ä–µ–Ω–¥: ${status["simulate_brand"] ?: "–Ω–µ –∑–∞–¥–∞–Ω"}\n")
                append("‚Ä¢ –í–µ—Ä—Å–∏—è MIUI: ${status["simulate_miui_version"] ?: "–Ω–µ –∑–∞–¥–∞–Ω–∞"}\n\n")
                append("–†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n")
                append("‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: ${Build.MANUFACTURER}\n")
                append("‚Ä¢ –ë—Ä–µ–Ω–¥: ${Build.BRAND}\n")
                append("‚Ä¢ –ú–æ–¥–µ–ª—å: ${Build.MODEL}")
            }
            ui.textDebugStatus.text = statusText
        } else {
            ui.textDebugStatus.text = "Debug —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω"
        }
    }

    private fun testMiuiUtils() {
        val context = this

        Log.d(TAG, "=== TESTING MIUI UTILS ===")

        val testResults = buildString {
            append("üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MiuiUtils:\n\n")

            val isMiui = MiuiUtils.isMiui(context)
            append("‚Ä¢ isMiui(): ${if (isMiui) "‚úÖ true" else "‚ùå false"} ${if (DebugUtils.isSimulateMiui(context)) "(—Å–∏–º—É–ª—è—Ü–∏—è)" else "(—Ä–µ–∞–ª—å–Ω–æ–µ)"}\n")

            val isChineseRom = MiuiUtils.isChineseRom(context)
            append("‚Ä¢ isChineseRom(): ${if (isChineseRom) "‚úÖ true" else "‚ùå false"} ${if (DebugUtils.isSimulateChineseRom(context)) "(—Å–∏–º—É–ª—è—Ü–∏—è)" else "(—Ä–µ–∞–ª—å–Ω–æ–µ)"}\n")

            val miuiVersion = MiuiUtils.miuiVersion(context)
            val debugMiuiVersion = DebugUtils.getSimulateMiuiVersion(context)
            val isSimulatingMiuiVersion = debugMiuiVersion != null && debugMiuiVersion.isNotEmpty()
            val isSimulatingAnyPlatform = DebugUtils.isDebugModeEnabled(context) &&
                (DebugUtils.getSimulateManufacturer(context) != null || isSimulatingMiuiVersion)
            append("‚Ä¢ miuiVersion(): $miuiVersion ${if (isSimulatingAnyPlatform) "(—Å–∏–º—É–ª—è—Ü–∏—è)" else "(—Ä–µ–∞–ª—å–Ω–æ–µ)"}\n")

            val manufacturer = DebugUtils.getSimulateManufacturer(context) ?: Build.MANUFACTURER
            val brand = DebugUtils.getSimulateBrand(context) ?: Build.BRAND

            append("‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: $manufacturer\n")
            append("‚Ä¢ –ë—Ä–µ–Ω–¥: $brand\n\n")

            val specialPerms = MiuiUtils.checkSpecialPerms(context)
            append("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:\n")
            specialPerms.forEach { (perm, granted) ->
                append("‚Ä¢ $perm: ${if (granted) "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ" else "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ"}\n")
            }
        }

        Log.d(TAG, testResults)
        ui.textTestResults.text = testResults
        ui.textTestResults.visibility = View.VISIBLE
        Toast.makeText(this, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–º. —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ", Toast.LENGTH_SHORT).show()
    }

    private fun debugNotifications() {
        Log.d(TAG, "=== DEBUGGING NOTIFICATIONS ===")

        val debugInfo = NotificationDebugger.debugNotificationSystem(this)

        ui.textTestResults.text = debugInfo
        ui.textTestResults.visibility = View.VISIBLE

        Toast.makeText(this, "–û—Ç–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–º. —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ", Toast.LENGTH_LONG).show()
    }

    private fun testNotifications() {
        Log.d(TAG, "=== TESTING NOTIFICATIONS ===")

        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        NotificationChannels.ensure(this)

        val results = buildString {
            append("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n")

            val quickCheck = NotificationDebugger.quickCheck(this@DebugMenuActivity)
            append(quickCheck)
            append("\n")

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å–ª—É–∂–µ–±–Ω—ã–π –∫–∞–Ω–∞–ª)
            val serviceTest = NotificationDebugger.testNotification(
                this@DebugMenuActivity,
                NotificationChannels.SERVICE_CHANNEL_ID,
                "–°–ª—É–∂–µ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                "–¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞ —Å–ª—É–∂–±—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            )
            append("üì± –°–ª—É–∂–µ–±–Ω—ã–π –∫–∞–Ω–∞–ª: $serviceTest\n")

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∏–∫–µ—Ç–∞—Ö (–∫–∞–Ω–∞–ª —Ç–∏–∫–µ—Ç–æ–≤)
            val ticketsTest = NotificationDebugger.testNotification(
                this@DebugMenuActivity,
                NotificationChannels.TICKETS_CHANNEL_ID,
                "–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç",
                "–¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–∏–∫–µ—Ç–∞—Ö"
            )
            append("üé´ –ö–∞–Ω–∞–ª —Ç–∏–∫–µ—Ç–æ–≤: $ticketsTest\n")
        }

        Log.d(TAG, results)
        ui.textTestResults.text = results
        ui.textTestResults.visibility = View.VISIBLE
        Toast.makeText(this, "–¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", Toast.LENGTH_SHORT).show()
    }

    private fun debugIntents() {
        Log.d(TAG, "=== DEBUGGING INTENTS ===")

        val debugInfo = IntentDebugger.debugFourpdaIntents(this)

        ui.textTestResults.text = debugInfo
        ui.textTestResults.visibility = View.VISIBLE

        Toast.makeText(this, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–º. —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ", Toast.LENGTH_LONG).show()
    }

    private fun openMiuiSetupActivity() {
        Log.d(TAG, "Opening MiuiSetupActivity...")
        try {
            val intent = android.content.Intent(this, MiuiSetupActivity::class.java)
            startActivity(intent)
            Toast.makeText(this, "–û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ MIUI", Toast.LENGTH_SHORT).show()
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è MiuiSetupActivity: ${e.message}")
            Toast.makeText(this, "–û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }

    private fun viewLogFiles() {
        Log.d(TAG, "=== VIEWING LOG FILES ===")

        val logFiles = FileLogger.getLogFiles()
        val logDirectory = FileLogger.getLogDirectory()

        val logInfo = buildString {
            append("üìÅ –õ–æ–≥-—Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n")

            if (logDirectory != null) {
                append("üìÇ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤: $logDirectory\n\n")
            } else {
                append("‚ùå –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n")
            }

            if (logFiles.isNotEmpty()) {
                append("üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${logFiles.size}\n\n")

                logFiles.take(10).forEach { file ->
                    val sizeKB = file.length() / 1024
                    val lastModified = java.text.SimpleDateFormat("dd.MM.yyyy HH:mm", java.util.Locale.getDefault())
                        .format(java.util.Date(file.lastModified()))

                    append("‚Ä¢ ${file.name}\n")
                    append("  –†–∞–∑–º–µ—Ä: ${sizeKB} KB\n")
                    append("  –ò–∑–º–µ–Ω–µ–Ω: $lastModified\n\n")
                }

                if (logFiles.size > 10) {
                    append("... –∏ –µ—â–µ ${logFiles.size - 10} —Ñ–∞–π–ª–æ–≤\n\n")
                }

                val latestLog = logFiles.firstOrNull()
                if (latestLog != null) {
                    append("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ ${latestLog.name}:\n")
                    append("‚îÄ".repeat(40) + "\n")

                    try {
                        val lines = latestLog.readLines().takeLast(20)

                        val criticalLines = lines.filter { line ->
                            line.contains("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê") ||
                                    line.contains("onTimeout") ||
                                    line.contains("–í–û–ó–ú–û–ñ–ù–´–ô –ö–†–≠–®") ||
                                    line.contains("ERROR") ||
                                    line.contains("Exception")
                        }

                        if (criticalLines.isNotEmpty()) {
                            append("üö® –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:\n")
                            criticalLines.forEach { line ->
                                append("‚ö†Ô∏è $line\n")
                            }
                            append("‚îÄ".repeat(40) + "\n")
                        }

                        lines.forEach { line ->
                            append("$line\n")
                        }
                    } catch (e: Exception) {
                        append("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${e.message}\n")
                    }
                }
            } else {
                append("üìÑ –õ–æ–≥-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n")
                append("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n")
                append("‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n")
                append("‚Ä¢ –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å\n")
                append("‚Ä¢ –í–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n")
            }
        }

        Log.d(TAG, logInfo)
        ui.textTestResults.text = logInfo
        ui.textTestResults.visibility = View.VISIBLE
        Toast.makeText(this, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥-—Ñ–∞–π–ª–∞—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞", Toast.LENGTH_SHORT).show()
    }

    override fun onResume() {
        super.onResume()
        updateDebugStatus()
    }
}
