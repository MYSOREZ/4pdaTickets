package ru.fourpda.tickets

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import android.util.Log
import android.webkit.*
import androidx.core.app.NotificationCompat

class ForegroundMonitorService : Service() {

    companion object {
        private const val TAG = "ForegroundService"
        const val ACTION_START_MONITORING = "ru.fourpda.tickets.action.START_MONITORING"
        const val ACTION_STOP_MONITORING = "ru.fourpda.tickets.action.STOP_MONITORING"
        const val ACTION_REFRESH_WEBVIEW = "ru.fourpda.tickets.action.REFRESH_WEBVIEW"
        const val ACTION_PING = "ru.fourpda.tickets.action.PING"
        const val ACTION_KEEP_ALIVE = "ru.fourpda.tickets.action.KEEP_ALIVE"

        private const val NOTIFICATION_ID = 1

        // –ö–ê–ù–ê–õ–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
        const val CHANNEL_SERVICE_ID = "service_channel"
        const val CHANNEL_TICKETS_ID = "tickets_channel"

        private const val TICKETS_URL = "https://4pda.to/forum/index.php?act=ticket"
    }

    private val handler = Handler(Looper.getMainLooper())
    private var isServiceStarted = false
    private var currentRefreshInterval = 30_000L  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫
    private var refreshCount = 0

    private var totalTickets = 0
    private var processedTickets = 0
    private var unprocessedTickets = 0
    private var inProgressTickets = 0
    private var isUserAuthed = false
    private var statsReceiver: BroadcastReceiver? = null

    private var webView: WebView? = null
    private var ticketMonitor: TicketMonitor? = null

    override fun onCreate() {
        super.onCreate()
        Log.d(TAG, "ForegroundMonitorService —Å–æ–∑–¥–∞–Ω")

        // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –í –°–ï–†–í–ò–°–ï
        createNotificationChannels()

        registerStatsReceiver()
        initWebViewInService()
    }

    private fun createNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

            // –ö–∞–Ω–∞–ª –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            val serviceChannel = NotificationChannel(
                CHANNEL_SERVICE_ID,
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∏–∫–µ—Ç–æ–≤",
                NotificationManager.IMPORTANCE_DEFAULT
            ).apply {
                description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
                setShowBadge(false)
                enableLights(false)
                enableVibration(false)
                setSound(null, null)
            }

            // –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–∞—Ö
            val ticketsChannel = NotificationChannel(
                CHANNEL_TICKETS_ID,
                "–ù–æ–≤—ã–µ —Ç–∏–∫–µ—Ç—ã",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–∞—Ö 4PDA"
                setShowBadge(true)
                enableLights(true)
                enableVibration(true)
                lightColor = android.graphics.Color.BLUE
            }

            // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã
            notificationManager.createNotificationChannel(serviceChannel)
            notificationManager.createNotificationChannel(ticketsChannel)

            Log.d(TAG, "‚úÖ –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã –≤ —Å–µ—Ä–≤–∏—Å–µ")
        } else {
            Log.d(TAG, "üì± Android < 8.0 - –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω—É–∂–Ω—ã")
        }
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        when (intent?.action) {
            ACTION_START_MONITORING -> startMonitoring()
            ACTION_STOP_MONITORING -> {
                stopMonitoring()
                return START_NOT_STICKY  // –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            }
            ACTION_REFRESH_WEBVIEW -> refreshWebView()
            ACTION_PING -> handlePing()
            ACTION_KEEP_ALIVE -> handleKeepAlive()
        }
        return START_STICKY  // –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É–±—å—ë—Ç
    }

    override fun onBind(intent: Intent?): IBinder? = null

    override fun onTaskRemoved(rootIntent: Intent?) {
        Log.d(TAG, "‚ö†Ô∏è onTaskRemoved: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Recent Apps, –Ω–æ —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        super.onTaskRemoved(rootIntent)

        // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
        if (isServiceStarted) {
            val notification = createServiceNotification("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
            val notificationManager = getSystemService(NotificationManager::class.java)
            notificationManager?.notify(NOTIFICATION_ID, notification)
        }
    }

    override fun onTimeout(startId: Int, fgsType: Int) {
        val message = "‚è∞ onTimeout –≤—ã–∑–≤–∞–Ω! –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FGS (startId=$startId, type=$fgsType)"
        Log.w(TAG, message)
        FileLogger.w(TAG, message)
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        FileLogger.logAppState(this)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π
        val prefs = getSharedPreferences("service_state", Context.MODE_PRIVATE)
        prefs.edit()
            .putBoolean("stopped_by_timeout", true)
            .putLong("timeout_timestamp", System.currentTimeMillis())
            .apply()
        
        FileLogger.w(TAG, "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–π–º-–∞—É—Ç–µ –≤ SharedPreferences")
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        FileLogger.flush()
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—Ä—ç—à–∞
        stopMonitoring()
        stopSelf()
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        showTimeoutNotification()
        
        FileLogger.w(TAG, "üõë –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–∞–π–º-–∞—É—Ç—É Android 15")
        super.onTimeout(startId, fgsType)
    }

    override fun onDestroy() {
        super.onDestroy()
        stopMonitoring()
        ticketMonitor?.stopMonitoring()
        webView?.destroy()
        unregisterStatsReceiver()
        Log.d(TAG, "ForegroundMonitorService —É–Ω–∏—á—Ç–æ–∂–µ–Ω")
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    private fun getCurrentRefreshInterval(): Long {
        val intervalSeconds = SettingsActivity.getRefreshInterval(this)
        Log.d(TAG, "üìÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: $intervalSeconds —Å–µ–∫—É–Ω–¥")
        return intervalSeconds * 1000L
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebView –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    private fun initWebViewInService() {
        try {
            Log.d(TAG, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebView –≤ —Å–µ—Ä–≤–∏—Å–µ")

            webView = WebView(this).apply {
                settings.javaScriptEnabled = true
                settings.domStorageEnabled = true
                settings.mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW
                settings.userAgentString = "Mozilla/5.0 (Linux; Android 10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Mobile Safari/537.36"
                settings.cacheMode = WebSettings.LOAD_NO_CACHE

                // –í —Å–µ—Ä–≤–∏—Å–µ –æ—Ç–∫–ª—é—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                settings.blockNetworkImage = true
                settings.setLoadsImagesAutomatically(false)

                CookieManager.getInstance().setAcceptCookie(true)

                webViewClient = object : WebViewClient() {
                    override fun onPageFinished(view: WebView?, url: String?) {
                        Log.d(TAG, "–°–µ—Ä–≤–∏—Å: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $url")
                        if (url?.contains("act=ticket") == true) {
                            isUserAuthed = true
                            Handler(Looper.getMainLooper()).postDelayed({
                                ticketMonitor?.searchNow()
                            }, 2000)
                        }
                    }

                    override fun onPageStarted(view: WebView?, url: String?, favicon: android.graphics.Bitmap?) {
                        Log.d(TAG, "–°–µ—Ä–≤–∏—Å: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è: $url")
                    }
                }

                loadUrl(TICKETS_URL)
            }

            // TicketMonitor –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            ticketMonitor = TicketMonitor(
                context = this,
                webView = webView!!
            ) { statusMessage ->
                Log.d(TAG, "–°—Ç–∞—Ç—É—Å –æ—Ç TicketMonitor: $statusMessage")
            }

            Log.d(TAG, "‚úÖ WebView –∏ TicketMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–µ—Ä–≤–∏—Å–µ")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebView –≤ —Å–µ—Ä–≤–∏—Å–µ: ${e.message}")
        }
    }

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–ï–ó –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ FGS
    private fun startMonitoring() {
        if (isServiceStarted) return
        isServiceStarted = true
        refreshCount = 0

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        currentRefreshInterval = getCurrentRefreshInterval()
        val message = "üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${currentRefreshInterval/1000} —Å–µ–∫—É–Ω–¥"
        Log.d(TAG, message)
        FileLogger.d(TAG, message)

        // –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ foreground service - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ ongoing —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showOngoingNotification()
        ticketMonitor?.startMonitoring()
        scheduleNextRefresh(0)

        val startMessage = "üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ —Å–µ—Ä–≤–∏—Å–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${formatInterval(currentRefreshInterval/1000)} (–±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ FGS)"
        Log.d(TAG, startMessage)
        FileLogger.i(TAG, startMessage)
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ ongoing —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ë–ï–ó foreground service
    private fun showOngoingNotification() {
        try {
            val notification = createServiceNotification()
            val notificationManager = getSystemService(NotificationManager::class.java)
            notificationManager?.notify(NOTIFICATION_ID, notification)
            Log.d(TAG, "‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –æ–±—ã—á–Ω–æ–µ ongoing —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ FGS)")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ ongoing —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${e.message}")
        }
    }

    // –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π
    private fun stopMonitoring() {
        if (!isServiceStarted) return
        isServiceStarted = false

        Log.d(TAG, "üõë –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Ä–≤–∏—Å–∞")

        // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
        handler.removeCallbacksAndMessages(null)

        // 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TicketMonitor
        ticketMonitor?.stopMonitoring()

        // 3. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ WebView –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        webView?.apply {
            clearHistory()
            clearCache(true)
            loadUrl("about:blank")
            onPause()
            removeAllViews()
            destroy()
        }
        webView = null
        ticketMonitor = null

        // 4. –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        val notificationManager = getSystemService(NotificationManager::class.java)
        notificationManager?.apply {
            cancel(NOTIFICATION_ID)
            cancelAll() // –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        }

        // 5. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (—Ç–µ–ø–µ—Ä—å –Ω–µ foreground)
        stopSelf()  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞

        Log.d(TAG, "‚úÖ –°–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—á–∏—â–µ–Ω")
    }

    private fun scheduleNextRefresh(delay: Long) {
        handler.removeCallbacksAndMessages(null)
        handler.postDelayed({
            refreshWebView()
        }, delay)
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    private fun refreshWebView() {
        if (!isServiceStarted) return
        refreshCount++

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º refresh
        val newInterval = getCurrentRefreshInterval()
        if (newInterval != currentRefreshInterval) {
            currentRefreshInterval = newInterval
        Log.d(TAG, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${formatInterval(currentRefreshInterval/1000)}")
        }

        Log.d(TAG, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WebView #$refreshCount (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${formatInterval(currentRefreshInterval/1000)})")

        webView?.loadUrl("javascript:window.location.reload(true)")
        scheduleNextRefresh(currentRefreshInterval)
    }

    private fun createTicketIntent(): Intent {
        val ticketUrl = "https://4pda.to/forum/index.php?act=ticket"
        Log.d(TAG, "üîó –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $ticketUrl")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–±–∞—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HyperOS/MIUI
        return IntentDebugger.createRobustFourpdaIntent(this, ticketUrl)
    }

    // –°–ª—É–∂–µ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∏–∫–µ—Ç—ã
    private fun createServiceNotification(customText: String? = null): Notification {
        val notificationIntent = createTicketIntent()

        val pendingIntent = PendingIntent.getActivity(
            this,
            0,
            notificationIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) PendingIntent.FLAG_IMMUTABLE else 0
        )

        val (statusText, detailText) = if (!isUserAuthed) {
            "–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç" to ""
        } else {
            val status = customText ?: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω"
            val intervalSec = currentRefreshInterval / 1000

            status to "–í—Å–µ–≥–æ: $totalTickets\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ/–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: $processedTickets/$unprocessedTickets\n–í —Ä–∞–±–æ—Ç–µ: $inProgressTickets\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: ${formatInterval(intervalSec)}"
        }

        val multiLineText = if (detailText.isNotEmpty()) {
            "$statusText\n$detailText"
        } else {
            statusText
        }

        return NotificationCompat.Builder(this, CHANNEL_SERVICE_ID)
            .setContentTitle("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∏–∫–µ—Ç–æ–≤")
            .setContentText(statusText)
            .setStyle(NotificationCompat.BigTextStyle()
                .bigText(multiLineText))
            .setSmallIcon(android.R.drawable.ic_menu_view)
            .setContentIntent(pendingIntent)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setCategory(NotificationCompat.CATEGORY_SERVICE)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .setOngoing(true)
            .setAutoCancel(false)
            .setSilent(true)
            .setShowWhen(false)
            .setOnlyAlertOnce(true)
            .setLocalOnly(true)
            .apply {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                    setForegroundServiceBehavior(NotificationCompat.FOREGROUND_SERVICE_IMMEDIATE)
                }
            }
            .build()
    }

    private fun updateNotificationWithStats() {
        if (!isServiceStarted) return

        try {
            val notification = createServiceNotification()
            val notificationManager = getSystemService(NotificationManager::class.java)
            notificationManager?.notify(NOTIFICATION_ID, notification)

            val intervalSec = currentRefreshInterval / 1000
            val statusLog = if (isUserAuthed) {
                "–í—Å–µ–≥–æ: $totalTickets, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ/–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: $processedTickets/$unprocessedTickets, –≤ —Ä–∞–±–æ—Ç–µ: $inProgressTickets (${formatInterval(intervalSec)})"
            } else {
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            }
            Log.d(TAG, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: $statusLog")

        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${e.message}")
        }
    }

    private fun registerStatsReceiver() {
        statsReceiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context?, intent: Intent?) {
                Log.d(TAG, "üì° ForegroundService –ø–æ–ª—É—á–∏–ª broadcast: ${intent?.action}")

                when (intent?.action) {
                    "ru.fourpda.tickets.TICKET_STATS" -> {
                        totalTickets = intent.getIntExtra("total", 0)
                        processedTickets = intent.getIntExtra("processed", 0)
                        unprocessedTickets = intent.getIntExtra("unprocessed", 0)
                        inProgressTickets = intent.getIntExtra("in_progress", 0)
                        Log.d(TAG, "üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤: –≤—Å–µ–≥–æ=$totalTickets, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=$processedTickets, –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö=$unprocessedTickets, –≤ —Ä–∞–±–æ—Ç–µ=$inProgressTickets")
                        updateNotificationWithStats()
                    }
                    "ru.fourpda.tickets.AUTH_STATUS" -> {
                        isUserAuthed = intent.getBooleanExtra("isAuthed", false)
                        Log.d(TAG, "üîë –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $isUserAuthed")
                        updateNotificationWithStats()
                    }
                }
            }
        }
        val filter = IntentFilter().apply {
            addAction("ru.fourpda.tickets.TICKET_STATS")
            addAction("ru.fourpda.tickets.AUTH_STATUS")
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            registerReceiver(statsReceiver, filter, RECEIVER_NOT_EXPORTED)
        } else {
            registerReceiver(statsReceiver, filter)
        }

        Log.d(TAG, "‚úÖ StatsReceiver –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ ForegroundService")
    }

    private fun unregisterStatsReceiver() {
        statsReceiver?.let {
            try {
                unregisterReceiver(it)
                Log.d(TAG, "‚úÖ StatsReceiver –æ—Ç–∫–ª—é—á–µ–Ω")
            } catch (e: Exception) {
                Log.w(TAG, "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è StatsReceiver: ${e.message}")
            }
        }
        statsReceiver = null
    }

    private fun handlePing() {
        Log.d(TAG, "üì° –ü–æ–ª—É—á–µ–Ω PING –æ—Ç KeepAliveWorker")
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        val prefs = getSharedPreferences("service_state", Context.MODE_PRIVATE)
        prefs.edit().putLong("last_ping_time", System.currentTimeMillis()).apply()
    }

    private fun handleKeepAlive() {
        Log.d(TAG, "üíì –ü–æ–ª—É—á–µ–Ω KEEP_ALIVE –æ—Ç AlarmReceiver")
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        val prefs = getSharedPreferences("service_state", Context.MODE_PRIVATE)
        prefs.edit().putLong("last_keep_alive_time", System.currentTimeMillis()).apply()
        
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if (!isServiceStarted) {
            Log.d(TAG, "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            startMonitoring()
        }
    }
    
    private fun showTimeoutNotification() {
        val notificationManager = getSystemService(NotificationManager::class.java)
        
        // –ò–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—ç—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –ª–∏–º–∏—Ç)
        val openAppIntent = Intent(this, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
        }
        
        val pendingIntent = PendingIntent.getActivity(
            this,
            999,
            openAppIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) PendingIntent.FLAG_IMMUTABLE else 0
        )
        
        val notification = NotificationCompat.Builder(this, CHANNEL_TICKETS_ID)
            .setSmallIcon(android.R.drawable.ic_dialog_alert)
            .setContentTitle("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π")
            .setContentText("Android –æ–≥—Ä–∞–Ω–∏—á–∏–ª —Ä–∞–±–æ—Ç—É –¥–æ 6 —á–∞—Å–æ–≤. –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
            .setStyle(NotificationCompat.BigTextStyle()
                .bigText("Android 15 –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ–æ–Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–æ 6 —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∏. " +
                        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."))
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setCategory(NotificationCompat.CATEGORY_ALARM)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setDefaults(NotificationCompat.DEFAULT_ALL)
            .build()
        
        notificationManager?.notify(998, notification)
        Log.d(TAG, "üì± –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∞–π–º-–∞—É—Ç–µ —Å–∏—Å—Ç–µ–º—ã")
    }

    private fun formatInterval(seconds: Long): String {
        return when {
            seconds >= 60 -> {
                val minutes = seconds / 60
                val remainingSeconds = seconds % 60
                if (remainingSeconds == 0L) {
                    "$minutes –º–∏–Ω"
                } else {
                    "$minutes –º–∏–Ω $remainingSeconds —Å–µ–∫"
                }
            }
            else -> "$seconds —Å–µ–∫"
        }
    }
}
