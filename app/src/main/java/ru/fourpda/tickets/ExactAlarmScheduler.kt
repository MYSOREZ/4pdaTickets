package ru.fourpda.tickets

import android.app.AlarmManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.SystemClock
import android.util.Log
import java.util.*
import kotlin.math.ceil

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–æ—á–Ω—ã—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –¥–ª—è —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É FGS –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–∞ Android 15
 */
object ExactAlarmScheduler {
    private const val TAG = "ExactAlarmScheduler"
    private const val REQUEST_CODE = 12345
    const val ACTION_EXACT_ALARM = "ru.fourpda.tickets.EXACT_ALARM"
    
    fun scheduleNextAlarm(context: Context, intervalMinutes: Int = 5) {
        val intervalSeconds = SettingsActivity.getRefreshInterval(context)
        scheduleNextAlarmSeconds(context, intervalSeconds)
    }
    
    fun scheduleNextAlarmSeconds(context: Context, intervalSeconds: Int) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–∫ –µ—Å—Ç—å (–º–∏–Ω–∏–º—É–º 60 —Å–µ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        val safeInterval = intervalSeconds
        
        if (!canScheduleExactAlarms(context)) {
            Log.w(TAG, "‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ WorkManager")
            scheduleWorkManagerFallback(context, safeInterval)
            return
        }
        
        val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
        val intent = Intent(context, ExactAlarmReceiver::class.java).apply {
            action = ACTION_EXACT_ALARM
        }
        
        val pendingIntent = PendingIntent.getBroadcast(
            context,
            REQUEST_CODE,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        // –Ø–∫–æ—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—Ä–µ–π—Ñ–∞
        val prefs = context.getSharedPreferences("alarm_schedule", Context.MODE_PRIVATE)
        val lastScheduled = prefs.getLong("last_scheduled", 0L)
        val now = SystemClock.elapsedRealtime()
        
        val triggerTime = if (lastScheduled == 0L) {
            now + (safeInterval.toLong() * 1000L)
        } else {
            val intervalMs = safeInterval.toLong() * 1000L
            val n = ceil(((now - lastScheduled).toDouble() / intervalMs.toDouble())).toLong() + 1L
            lastScheduled + (n * intervalMs)
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        prefs.edit().putLong("last_scheduled", triggerTime).apply()
        
        try {
            when {
                Build.VERSION.SDK_INT >= Build.VERSION_CODES.M -> {
                    alarmManager.setExactAndAllowWhileIdle(
                        AlarmManager.ELAPSED_REALTIME_WAKEUP,
                        triggerTime,
                        pendingIntent
                    )
                }
                else -> {
                    alarmManager.setExact(
                        AlarmManager.ELAPSED_REALTIME_WAKEUP,
                        triggerTime,
                        pendingIntent
                    )
                }
            }
            
            val triggerInSeconds = (triggerTime - now) / 1000L
            val successMessage = "‚úÖ –¢–æ—á–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${safeInterval} —Å–µ–∫—É–Ω–¥ (—á–µ—Ä–µ–∑ ${triggerInSeconds}—Å)"
            Log.d(TAG, successMessage)
            FileLogger.d(TAG, successMessage)
        } catch (e: Exception) {
            val errorMessage = "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—á–Ω–æ–≥–æ –±—É–¥–∏–ª—å–Ω–∏–∫–∞: ${e.message}"
            Log.e(TAG, errorMessage)
            FileLogger.e(TAG, errorMessage, e)
            scheduleWorkManagerFallback(context, safeInterval)
        }
    }
    
    private fun scheduleWorkManagerFallback(context: Context, intervalSeconds: Int) {
        Log.w(TAG, "üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ WorkManager fallback —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${maxOf(intervalSeconds, 900)} —Å–µ–∫—É–Ω–¥")
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É WorkManager periodic —Å –º–∏–Ω–∏–º—É–º–æ–º 15 –º–∏–Ω—É—Ç
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    }
    
    private fun scheduleInexactAlarm(context: Context, intervalMinutes: Int) {
        val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
        val intent = Intent(context, ExactAlarmReceiver::class.java).apply {
            action = ACTION_EXACT_ALARM
        }
        
        val pendingIntent = PendingIntent.getBroadcast(
            context,
            REQUEST_CODE,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) PendingIntent.FLAG_IMMUTABLE else 0
        )
        
        val triggerTime = System.currentTimeMillis() + (intervalMinutes * 60 * 1000L)
        
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            alarmManager.setAndAllowWhileIdle(
                AlarmManager.RTC_WAKEUP,
                triggerTime,
                pendingIntent
            )
        } else {
            alarmManager.set(
                AlarmManager.RTC_WAKEUP,
                triggerTime,
                pendingIntent
            )
        }
        
        Log.d(TAG, "‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ—Ç–æ—á–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ ${intervalMinutes} –º–∏–Ω—É—Ç")
    }
    
    private fun scheduleInexactAlarmSeconds(context: Context, intervalSeconds: Int) {
        val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
        val intent = Intent(context, ExactAlarmReceiver::class.java).apply {
            action = ACTION_EXACT_ALARM
        }
        
        val pendingIntent = PendingIntent.getBroadcast(
            context,
            REQUEST_CODE,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) PendingIntent.FLAG_IMMUTABLE else 0
        )
        
        val triggerTime = System.currentTimeMillis() + (intervalSeconds * 1000L)
        
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            alarmManager.setAndAllowWhileIdle(
                AlarmManager.RTC_WAKEUP,
                triggerTime,
                pendingIntent
            )
        } else {
            alarmManager.set(
                AlarmManager.RTC_WAKEUP,
                triggerTime,
                pendingIntent
            )
        }
        
        Log.d(TAG, "‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ—Ç–æ—á–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ ${intervalSeconds} —Å–µ–∫—É–Ω–¥")
    }
    
    fun cancelAlarm(context: Context) {
        val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
        val intent = Intent(context, ExactAlarmReceiver::class.java)
        val pendingIntent = PendingIntent.getBroadcast(
            context,
            REQUEST_CODE,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                        PendingIntent.FLAG_IMMUTABLE
                    } else {
                        0
                    }
        )
        
        alarmManager.cancel(pendingIntent)
        Log.d(TAG, "üõë –¢–æ—á–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
    }
    
    fun canScheduleExactAlarms(context: Context): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
            alarmManager.canScheduleExactAlarms()
        } else {
            true // –ù–∞ Android < 12 —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        }
    }
    
    fun requestExactAlarmPermission(context: Context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            val intent = Intent(android.provider.Settings.ACTION_REQUEST_SCHEDULE_EXACT_ALARM).apply {
                data = android.net.Uri.parse("package:${context.packageName}")
            }
            context.startActivity(intent)
        }
    }
}